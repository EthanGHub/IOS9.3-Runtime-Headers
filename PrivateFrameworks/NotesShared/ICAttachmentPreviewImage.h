//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <NotesShared/ICCloudSyncingObject.h>

@class NSData, NSDate, NSObject, NSSet;
@protocol OS_dispatch_queue;

@interface ICAttachmentPreviewImage : ICCloudSyncingObject
{
    NSObject<OS_dispatch_queue> *_fileQueue;
    long long _fileQueueOnceToken;
    unsigned long long _imageID;
}

+ (id)identifierForContentIdentifier:(id)arg1 scale:(double)arg2 width:(double)arg3 height:(double)arg4;
+ (id)previewImageDirectoryURL;
+ (struct UIImage *)orientedImage:(struct UIImage *)arg1 withTransform:(struct CGAffineTransform)arg2 background:(int)arg3 backgroundTransform:(struct CGAffineTransform)arg4;
+ (void)waitUntilAllFileWritesAreFinished;
+ (id)fileQueueGroup;
+ (id)fileGlobalQueue;
+ (id)concurrentFileLoadLimitSemaphore;
+ (void)purgeAllPreviewImages;
+ (id)imageCache;
+ (void)deleteStrandedAttachmentPreviewImagesInContext:(id)arg1;
+ (id)attachmentPreviewImagesMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)allAttachmentPreviewImagesInContext:(id)arg1;
+ (id)visibleAttachmentPreviewImagesInContext:(id)arg1;
+ (id)attachmentPreviewImageWithIdentifier:(id)arg1 inContext:(id)arg2;
+ (void)purgeAllAttachmentPreviewImagesInContext:(id)arg1;
+ (id)newAttachmentPreviewImageInContext:(id)arg1;
- (void).cxx_destruct;
- (void)saveAndClearDecryptedData;
- (id)_decryptedImageData;
- (id)decryptedImageData;
- (_Bool)_writeEncryptedImageFromData:(id)arg1;
- (_Bool)writeEncryptedImageFromData:(id)arg1;
- (id)parentEncryptableObject;
- (void)deleteFromLocalDatabase;
- (_Bool)needsInitialFetchFromCloud;
- (_Bool)needsToBeFetchedFromCloud;
- (_Bool)needsToBeDeletedFromCloud;
- (_Bool)needsToBePushedToCloud;
- (id)loggingDescriptionValues;
- (_Bool)shouldSyncToCloud;
- (_Bool)isSketch;
@property(retain, nonatomic) NSData *metadata; // @dynamic metadata;
- (id)oldPreviewImageURL;
- (id)orientedPreviewImageURLCreateIfNeeded:(_Bool)arg1;
- (id)orientedPreviewImageURL;
- (id)encryptedPreviewImageURL;
- (id)previewImageURL;
- (_Bool)makeSurePreviewImageDirectoryExists:(id *)arg1;
- (void)setImage:(struct UIImage *)arg1 withScale:(double)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)imageIsValid;
- (struct UIImage *)image;
- (CDUnknownBlockType)asyncImage:(CDUnknownBlockType)arg1 aboutToLoadHandler:(CDUnknownBlockType)arg2;
- (id)newImageLoaderForUpdatingImageOnCompletion:(_Bool)arg1 asyncDataLoading:(_Bool)arg2;
- (id)newImageLoaderForUpdatingImageOnCompletion:(_Bool)arg1;
- (struct UIImage *)orientedImageWithBackground:(int)arg1;
- (struct UIImage *)imageWithBackground:(int)arg1;
- (long long)previewImageOrientation;
- (struct UIImage *)orientedImage;
- (struct CGAffineTransform)orientedImageTransform;
- (void)invalidateImage;
- (void)invalidateOrientedImage;
- (void)removeItemAtURL:(id)arg1;
- (void)prepareForDeletion;
- (id)fileQueue;
- (struct CGSize)size;
- (void)setCachedOrientedImage:(struct UIImage *)arg1;
- (struct UIImage *)cachedOrientedImage;
- (id)orientedImageID;
- (void)setCachedImage:(struct UIImage *)arg1;
- (struct UIImage *)cachedImage;
- (id)initWithEntity:(id)arg1 insertIntoManagedObjectContext:(id)arg2;

// Remaining properties
@property(retain, nonatomic) NSSet *attachments; // @dynamic attachments;
@property(retain, nonatomic) NSData *cryptoMetadataInitializationVector; // @dynamic cryptoMetadataInitializationVector;
@property(retain, nonatomic) NSData *cryptoMetadataTag; // @dynamic cryptoMetadataTag;
@property(retain, nonatomic) NSData *encryptedMetadata; // @dynamic encryptedMetadata;
@property(nonatomic) double height; // @dynamic height;
@property(retain, nonatomic) NSDate *modifiedDate; // @dynamic modifiedDate;
@property(nonatomic) double scale; // @dynamic scale;
@property(nonatomic) _Bool scaleWhenDrawing; // @dynamic scaleWhenDrawing;
@property(nonatomic) short version; // @dynamic version;
@property(nonatomic) _Bool versionOutOfDate; // @dynamic versionOutOfDate;
@property(nonatomic) double width; // @dynamic width;

@end

