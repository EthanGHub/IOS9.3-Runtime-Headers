//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <CoreHAP/HAPAccessoryServerBTLE.h>

#import <CoreHAP/CBPeripheralDelegate-Protocol.h>
#import <CoreHAP/HAPBTLEControlOutputStreamDelegate-Protocol.h>
#import <CoreHAP/HAPPairSetupSessionClientDelegate-Protocol.h>
#import <CoreHAP/HAPSecuritySessionDelegate-Protocol.h>
#import <CoreHAP/HAPTimerDelegate-Protocol.h>

@class HAPCharacteristic, HAPPairSetupSession, HAPSecuritySession, HAPTimer, NSMapTable, NSMutableArray, NSOperationQueue, NSString, _HAPBTLEDiscoveryContext;

@interface _HAPAccessoryServerBTLE200 : HAPAccessoryServerBTLE <CBPeripheralDelegate, HAPBTLEControlOutputStreamDelegate, HAPPairSetupSessionClientDelegate, HAPSecuritySessionDelegate, HAPTimerDelegate>
{
    _Bool _verified;
    _Bool _badPairSetupCode;
    _Bool _pairing;
    _Bool _supportsMFiPairSetup;
    _Bool _securitySessionOpen;
    _Bool _securitySessionOpening;
    long long _connectionState;
    CDUnknownBlockType _connectionCompletionHandler;
    HAPTimer *_connectionIdleTimer;
    _HAPBTLEDiscoveryContext *_discoveryContext;
    HAPCharacteristic *_identifyCharacteristic;
    HAPPairSetupSession *_pairSetupSession;
    double _pairSetupBackoffTimeInterval;
    CDUnknownBlockType _setupCodeCompletionHandler;
    HAPCharacteristic *_pairingFeaturesCharacteristic;
    HAPCharacteristic *_pairSetupCharacteristic;
    HAPSecuritySession *_securitySession;
    HAPCharacteristic *_pairVerifyCharacteristic;
    NSOperationQueue *_pairVerifyOperationQueue;
    HAPCharacteristic *_pairingsCharacteristic;
    NSMutableArray *_pendingRequests;
    NSOperationQueue *_requestOperationQueue;
    NSMutableArray *_pendingResponses;
    NSOperationQueue *_clientOperationQueue;
    NSMapTable *_characteristicWriteCompletionHandlers;
    NSMapTable *_characteristicEnableEventCompletionHandlers;
}

+ (_Bool)parseWriteResponse:(id)arg1 value:(id *)arg2 error:(id *)arg3;
+ (id)executeWriteRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;
+ (id)prepareWriteRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 error:(id *)arg5;
+ (id)writeRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 error:(id *)arg5;
+ (_Bool)parseReadResponse:(id)arg1 value:(id *)arg2 error:(id *)arg3;
+ (id)readRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;
+ (_Bool)isHAPDescriptor:(id)arg1;
+ (_Bool)isHAPService:(id)arg1;
+ (id)parseSignatureResponse:(id)arg1 error:(id *)arg2;
+ (id)signatureRequestForCharacteristic:(id)arg1 requiresAuthentication:(_Bool)arg2 error:(id *)arg3;
@property(readonly, nonatomic) NSMapTable *characteristicEnableEventCompletionHandlers; // @synthesize characteristicEnableEventCompletionHandlers=_characteristicEnableEventCompletionHandlers;
@property(readonly, nonatomic) NSMapTable *characteristicWriteCompletionHandlers; // @synthesize characteristicWriteCompletionHandlers=_characteristicWriteCompletionHandlers;
@property(readonly, nonatomic) NSOperationQueue *clientOperationQueue; // @synthesize clientOperationQueue=_clientOperationQueue;
@property(readonly, nonatomic) NSMutableArray *pendingResponses; // @synthesize pendingResponses=_pendingResponses;
@property(readonly, nonatomic) NSOperationQueue *requestOperationQueue; // @synthesize requestOperationQueue=_requestOperationQueue;
@property(readonly, nonatomic) NSMutableArray *pendingRequests; // @synthesize pendingRequests=_pendingRequests;
@property(nonatomic) __weak HAPCharacteristic *pairingsCharacteristic; // @synthesize pairingsCharacteristic=_pairingsCharacteristic;
@property(readonly, nonatomic) NSOperationQueue *pairVerifyOperationQueue; // @synthesize pairVerifyOperationQueue=_pairVerifyOperationQueue;
@property(nonatomic) __weak HAPCharacteristic *pairVerifyCharacteristic; // @synthesize pairVerifyCharacteristic=_pairVerifyCharacteristic;
@property(nonatomic, getter=isSecuritySessionOpening) _Bool securitySessionOpening; // @synthesize securitySessionOpening=_securitySessionOpening;
@property(nonatomic, getter=isSecuritySessionOpen) _Bool securitySessionOpen; // @synthesize securitySessionOpen=_securitySessionOpen;
@property(retain, nonatomic) HAPSecuritySession *securitySession; // @synthesize securitySession=_securitySession;
@property(nonatomic) __weak HAPCharacteristic *pairSetupCharacteristic; // @synthesize pairSetupCharacteristic=_pairSetupCharacteristic;
@property(nonatomic) __weak HAPCharacteristic *pairingFeaturesCharacteristic; // @synthesize pairingFeaturesCharacteristic=_pairingFeaturesCharacteristic;
@property(nonatomic) _Bool supportsMFiPairSetup; // @synthesize supportsMFiPairSetup=_supportsMFiPairSetup;
@property(nonatomic, getter=isPairing) _Bool pairing; // @synthesize pairing=_pairing;
@property(copy, nonatomic) CDUnknownBlockType setupCodeCompletionHandler; // @synthesize setupCodeCompletionHandler=_setupCodeCompletionHandler;
@property(nonatomic, getter=isBadSetupCode) _Bool badPairSetupCode; // @synthesize badPairSetupCode=_badPairSetupCode;
@property(nonatomic) double pairSetupBackoffTimeInterval; // @synthesize pairSetupBackoffTimeInterval=_pairSetupBackoffTimeInterval;
@property(retain, nonatomic) HAPPairSetupSession *pairSetupSession; // @synthesize pairSetupSession=_pairSetupSession;
@property(nonatomic) __weak HAPCharacteristic *identifyCharacteristic; // @synthesize identifyCharacteristic=_identifyCharacteristic;
@property(nonatomic, getter=isVerified) _Bool verified; // @synthesize verified=_verified;
@property(retain, nonatomic) _HAPBTLEDiscoveryContext *discoveryContext; // @synthesize discoveryContext=_discoveryContext;
@property(retain, nonatomic) HAPTimer *connectionIdleTimer; // @synthesize connectionIdleTimer=_connectionIdleTimer;
@property(copy, nonatomic) CDUnknownBlockType connectionCompletionHandler; // @synthesize connectionCompletionHandler=_connectionCompletionHandler;
@property(nonatomic) long long connectionState; // @synthesize connectionState=_connectionState;
- (void).cxx_destruct;
- (void)timerDidFire:(id)arg1;
- (void)securitySession:(id)arg1 didCloseWithError:(id)arg2;
- (void)securitySessionDidOpen:(id)arg1;
- (void)securitySessionIsOpening:(id)arg1;
- (void)securitySession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;
- (id)securitySession:(id)arg1 didReceiveRequestForPeerPairingIdentityWithIdentifier:(id)arg2 error:(id *)arg3;
- (id)securitySession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;
- (_Bool)pairSetupSession:(id)arg1 didReceiveBackoffRequestWithTimeInterval:(double)arg2;
- (void)pairSetupSessionDidReceiveInvalidSetupCode:(id)arg1;
- (void)pairSetupSession:(id)arg1 didReceiveSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg2;
- (void)pairSetupSession:(id)arg1 didStopWithError:(id)arg2;
- (_Bool)pairSetupSession:(id)arg1 didPairWithPeer:(id)arg2 error:(id *)arg3;
- (id)pairSetupSession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;
- (void)pairSetupSession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;
- (void)controlOutputStreamDidComplete:(id)arg1;
- (void)controlOutputStream:(id)arg1 didCloseWithError:(id)arg2;
- (void)controlOutputStreamDidOpen:(id)arg1;
- (void)controlOutputStream:(id)arg1 didReceiveRequestToSendControlPacket:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)peripheral:(id)arg1 didUpdateNotificationStateForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didWriteValueForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didUpdateValueForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didUpdateValueForDescriptor:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didDiscoverDescriptorsForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didDiscoverCharacteristicsForService:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didModifyServices:(id)arg2;
- (void)peripheral:(id)arg1 didDiscoverServices:(id)arg2;
- (void)_notifyDelegateOfSentPlaintextData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfSentEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfReceivedPlaintextData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfReceivedEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_handleConnectionIdleTimeout;
- (void)_suspendConnectionIdleTimer;
- (void)_resumeConnectionIdleTimer;
- (void)_kickConnectionIdleTimer;
- (void)handleDisconnectionWithError:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)handleConnectionWithError:(id)arg1;
- (void)disconnectWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_cancelConnectionWithError:(id)arg1;
- (void)connectWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)_decryptData:(id)arg1 error:(id *)arg2;
- (id)_encryptDataAndGenerateAuthTag:(id)arg1 error:(id *)arg2;
- (void)_handleSecuritySessionSetupExchangeData:(id)arg1;
- (void)_establishSecureSession;
- (void)_cancelAllQueuedOperationsWithError:(id)arg1;
- (void)_resumeAllOperations;
- (void)_suspendAllOperations;
- (unsigned long long)_outstandingRequests;
- (void)_enqueueRequest:(id)arg1;
- (void)_handleResponseData:(id)arg1 fromCharacteristic:(id)arg2 error:(id)arg3;
- (void)_requestResponseForRequest:(id)arg1;
- (void)_handleWriteCompletionForCharacteristic:(id)arg1 error:(id)arg2;
- (void)_sendData:(id)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_sendControlPacket:(id)arg1 forRequest:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (unsigned long long)_maximumControlWriteLengthForRequest:(id)arg1;
- (void)_reallySendRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_sendRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)_pendingResponseForRequest:(id)arg1;
- (id)_pendingRequestForCharacteristic:(id)arg1;
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;
- (id)getLocalPairingIdentityAndAllowCreation:(_Bool)arg1 error:(id *)arg2;
- (void)_sendPairingRequestData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (_Bool)addPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(_Bool)arg3 queue:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)_pairingCompletedWithError:(id)arg1;
- (_Bool)tryPairingPassword:(id)arg1 error:(id *)arg2;
- (void)_handlePairingSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_handlePairSetupSessionExchangeData:(id)arg1;
- (_Bool)stopPairingWithError:(id *)arg1;
- (void)continuePairingAfterAuthPrompt;
- (_Bool)_parsePairingFeaturesCharacteristic:(id)arg1 supportsMFiPairSetup:(_Bool *)arg2 error:(id *)arg3;
- (void)_getPairingFeaturesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_checkForAuthPrompt;
- (void)startPairing;
- (void)_handleEventIndicationForCharacteristic:(id)arg1;
- (void)_handleHAPNotificationStateUpdateForCharacteristic:(id)arg1 error:(id)arg2;
- (void)_enableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_performEnableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_enableEvent:(_Bool)arg1 forCharacteristic:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;
- (void)_enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;
- (void)_performTimedWriteExecuteForCharacteristic:(id)arg1 value:(id)arg2 options:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_performTimedWritePrepareWithValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_performTimedWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_performWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_writeValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)writeValue:(id)arg1 forCharacteristic:(id)arg2 authorizationData:(id)arg3 queue:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_readValueForCharacteristic:(id)arg1 options:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)readValueForCharacteristic:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)_parseCharacteristic:(id)arg1 error:(id *)arg2;
- (id)_parseService:(id)arg1 error:(id *)arg2;
- (_Bool)shouldVerifyHAPCharacteristic:(id)arg1;
- (_Bool)isHAPCharacteristic:(id)arg1;
- (void)_handleReadCharacteristicSignature:(id)arg1 error:(id)arg2;
- (void)_readCharacteristicSignature:(id)arg1;
- (id)_getServiceInstanceID:(id)arg1;
- (id)_getCharacteristicInstanceID:(id)arg1 error:(id *)arg2;
- (void)_readCharacteristicSignatures;
- (void)_handleReadDescriptorValue:(id)arg1 error:(id)arg2;
- (void)_readDescriptorValue:(id)arg1;
- (void)_handleReadCharacteristicValue:(id)arg1 error:(id)arg2;
- (void)_readCharacteristicValue:(id)arg1;
- (void)_handleDiscoveredCharactersitic:(id)arg1 error:(id)arg2;
- (void)_discoverCharacteristic:(id)arg1;
- (void)_handleReadServiceInstanceId:(id)arg1;
- (void)_handleDiscoveredService:(id)arg1 error:(id)arg2;
- (void)_discoverService:(id)arg1;
- (void)_handleDiscoveredServices:(id)arg1 error:(id)arg2;
- (void)_discoverServices;
- (void)_handleCompletedDiscovery;
- (void)_retryDiscovery;
- (void)_cancelDiscoveryWithError:(id)arg1;
- (void)_discoverWithType:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)discoverAccessories;
- (id)_characteristicForCBCharacteristic:(id)arg1;
- (id)_serviceForCBService:(id)arg1;
- (_Bool)_delegateRespondsToSelector:(SEL)arg1;
- (void)_createPrimaryAccessoryFromAdvertisementData;
- (unsigned long long)hapBLEProtocolVersion;
@property(readonly, copy) NSString *description;
@property(readonly, copy) NSString *debugDescription;
- (id)descriptionWithPointer:(_Bool)arg1;
- (id)shortDescription;
- (void)dealloc;
- (void)_resetWithError:(id)arg1;
- (id)initWithPeripheral:(id)arg1 name:(id)arg2 pairingUsername:(id)arg3 statusFlags:(id)arg4 stateNumber:(id)arg5 category:(id)arg6 browser:(id)arg7 keyStore:(id)arg8;

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

