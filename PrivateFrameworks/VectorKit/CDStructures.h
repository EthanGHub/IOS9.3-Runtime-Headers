//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

@class GEOVectorTile, VKRouteContext;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AlphaAtlas {
    unsigned int _field1;
    _Bool _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    float _field6;
    struct Texture2D *_field7;
};

struct AltitudeDebugSettings {
    _Bool altitudePauseLoading;
    _Bool altitudeFreezeViewNode;
    _Bool altitudeTexturePaging;
    _Bool altitudeShowTileBounds;
    _Bool altitudeThreadDrawing;
    _Bool altitudeHighResSatellite;
    _Bool altitudeMipmapSatellite;
    _Bool altitudeMipmapFlyover;
    _Bool altitudeMipmapObjectTree;
    _Bool altitudeShowNightLight;
    float lodScale;
    float tileQualityThreshold;
    float hideMeshTime;
    float fadeSpeed;
    _Bool tourSpeedup;
    float tourSpeedupFactor;
};

struct AnchorContext {
    _Bool _field1;
    id _field2;
    id _field3;
};

struct AnchorFactory;

struct AnchorManagerPrivate;

struct AngularSpringDamper {
    double _position;
    double _velocity;
    double _acceleration;
    double _kSpring;
    double _kDamper;
    double _restingPosition;
    _Bool _directionIsPositive;
};

struct Animation;

struct AnimationManager {
    struct AnimationTimer _field1;
    double _field2;
    struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder>> _field3;
};

struct AnimationObjectHolder;

struct AnimationReferenceTimer;

struct AnimationTimer {
    struct AnimationReferenceTimer *_field1;
    double _field2;
    double _field3;
    double _field4;
};

struct BaseMesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct BitmapData;

struct BitmapDataBase;

struct BlendState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    Matrix_5173352a _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
};

struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
};

struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
};

struct Box<float, 3> {
    Matrix_811b2232 _minimum;
    Matrix_811b2232 _maximum;
};

struct Box<unsigned int, 2> {
    struct Matrix<unsigned int, 2, 1> _minimum;
    struct Matrix<unsigned int, 2, 1> _maximum;
};

struct Buffer;

struct BufferData;

struct BufferLoadItem;

struct BufferMemory {
    struct BufferData *_user;
    struct ResourceAccessor *_accessor;
    struct Range _range;
    int _access;
    int _sync;
    char *_data;
};

struct BuildingMesh;

struct C3mmRequestManager;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct CameraManager {
    CDUnknownFunctionPointerType *_vptr$CameraManager;
    _Bool _panBegin;
    _Bool _panInProgress;
    _Bool _panEnd;
    struct Vector2i _panCurrentCursor;
    struct Vector2i _panPreviousCursor;
    struct Vector2i _panStartCursor;
    struct Position3d _panStartPosition;
    double _panDistance;
    _Bool _panAtStartPosition;
    _Bool _rotateBegin;
    _Bool _rotateInProgress;
    _Bool _rotateEnd;
    struct Position3d _rotateStartPosition;
    struct Vector2i _rotateCurrentCursor;
    double _rotateAngle;
    _Bool _tiltBegin;
    _Bool _tiltInProgress;
    _Bool _tiltEnd;
    struct Position3d _tiltStartPosition;
    struct Vector2i _tiltCurrentCursor;
    struct Vector2i _tiltPreviousCursor;
    double _tiltAngle;
    _Bool _zoomBegin;
    _Bool _zoomInProgress;
    _Bool _zoomEnd;
    struct Position3d _zoomStartPosition;
    struct Vector2i _zoomCurrentCursor;
    double _zoomFactor;
    double _zoomStartDistance;
    _Bool _zoomRotateToNorth;
    _Bool _useTiltLimit;
    int _tiltLimitMode;
    _Bool _tiltLimitPushDownEnabled;
    _Bool _tiltLimitTransferInProgress;
    _Bool _tiltLimitPushDown;
    double _startPushDownTilt;
    double _tiltLimitTransferFraction;
    double _startTiltLimitTilt;
    struct PositionGeo3d _startTiltLimitPosition;
    struct Vector3d _startTiltLimitDirection;
    double _fullZoomTiltLimitFactor;
};

struct CartoStyle;

struct ClearItem {
    unsigned char colorMask;
    Matrix_5173352a color;
    _Bool clearDepthBuffer;
    float depth;
    unsigned char clearStencilBuffer;
    int stencil;
    unsigned char scissorRegion;
    struct Box<unsigned int, 2> scissorRect;
};

struct ColorState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
};

struct CommandBuffer {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    unsigned char _field3;
    struct RenderQueue *_field4;
    struct ClearItem *_field5;
    struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *>> _field6;
    struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> _field7;
    struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> _field8;
    struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> _field9;
    struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery>> _field10;
    id _field11;
};

struct CommandBufferIdSet {
    struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> _ids;
};

struct CompleteGlobeTileSetCullingGraph;

struct CompleteGlobeTileSetLoader;

struct CompressedMeshMesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct ConstantCReflection;

struct ConstantDataElement;

struct ConstantDataTyped<ggl::AnimatableTexture::Variant>;

struct ConstantDataTyped<ggl::Fog::Skyfog>;

struct ConstantDataTyped<ggl::Grid::Style>;

struct ConstantDataTyped<ggl::GridBase::GridView>;

struct ConstantDataTyped<ggl::PolygonFill::Fill>;

struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {
    int _field1;
    int _field2;
    int _field3;
    struct shared_ptr<ggl::Buffer> _field4;
    struct Range _field5;
    unsigned long long _field6;
    struct Range _field7;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field8;
    struct ConstantCReflection *_field9;
};

struct ConstantDataTyped<ggl::SimpleGrid::Style>;

struct ConstantDataTyped<ggl::Sky::Style>;

struct ConstantDataTyped<ggl::Tile::View>;

struct CullingGridWithHeight {
    float _heights[16];
};

struct CullingNode;

struct DataOverrideManager;

struct DataWrite<ggl::ColoredText::My>;

struct DataWrite<ggl::PolygonBase::CompressedVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::PolygonMesh::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<unsigned short> {
    struct BufferMemory _memory;
};

struct DebugConsole {
    CDUnknownFunctionPointerType *_field1;
    Matrix_8746f91e _field2;
    Matrix_8746f91e _field3;
    Matrix_8746f91e _field4;
    Matrix_8746f91e _field5;
    unsigned long long _field6;
    struct RenderItem *_field7;
    struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> _field8;
    unsigned long long _field9;
    Matrix_8746f91e *_field10;
    struct Matrix<unsigned char, 4, 1> _field11;
    struct Matrix<unsigned char, 4, 1> _field12;
    float _field13;
};

struct DebugConsoleManager;

struct DepthState {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    float _field6;
    float _field7;
};

struct Device {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
};

struct DisplayStyle {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
};

struct DynamicMovement;

struct EarthAdjustedViewNode;

struct FadeTileEffectNode;

struct FeatureAttributePair;

struct FeatureAttributeSet {
    struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair>> _attributes;
};

struct FixedPointVector<unsigned char, 4> {
    unsigned char _e[4];
};

struct Flow {
    long long _field1;
    float _field2;
    float _field3;
    int _field4;
};

struct FlyoverTour;

struct FogInfo {
    struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog>> _fogConstantData;
};

struct FontOptions {
    basic_string_a1f69cfb _field1;
    float _field2;
    float _field3;
    float _field4;
    _Bool _field5;
    _Bool _field6;
};

struct FragmentBuffer;

struct FragmentedPool<ggl::Building::Shader::Setup>;

struct FragmentedPool<ggl::BuildingFlat::Shader::Setup>;

struct FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>;

struct FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>;

struct FragmentedPool<ggl::BuildingShadow::Shader::Setup>;

struct FragmentedPool<ggl::BuildingTop::Shader::Setup>;

struct FragmentedPool<ggl::Debug::BaseMesh>;

struct FragmentedPool<ggl::Debug::Shader::Setup>;

struct FragmentedPool<ggl::DebugPoints::Shader::Setup>;

struct FragmentedPool<ggl::FoggedBuilding::Shader::Setup>;

struct FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>;

struct FragmentedPool<ggl::Glow::Shader::Setup>;

struct FragmentedPool<ggl::GlowAlpha::Shader::Setup>;

struct FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>;

struct FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>;

struct FragmentedPool<ggl::PolygonFill::Shader::Setup>;

struct FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>;

struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>;

struct FragmentedPool<ggl::PolygonStroke::Shader::Setup>;

struct FragmentedPool<ggl::PrefilteredLine::Shader::Setup>;

struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>;

struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>;

struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>;

struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>;

struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>;

struct FragmentedPool<ggl::RealisticRoad::Shader::Setup>;

struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>;

struct FragmentedPool<ggl::RealisticTexture::Shader::Setup>;

struct FragmentedPool<ggl::RenderItem>;

struct FrameLatLon {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    struct PositionLatLonAlt _field5;
};

struct FreeList;

struct GEOTransitNodeFeature {
    CDStruct_d374d81c _field1;
    struct _NSRange _field2;
    CDStruct_183601bc *_field3;
    struct GEOTransitNodeFeature *_field4;
    unsigned long long *_field5;
    unsigned long long *_field6;
    char _field7;
    unsigned char _field8;
    unsigned char _field9;
    unsigned char _field10;
    unsigned short _field11;
    unsigned long long _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    float _field16;
    struct _NSRange _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    struct _NSRange _field21;
};

struct GLDevice;

struct GLRenderer {
    CDUnknownFunctionPointerType *_field1;
    struct Device *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    _Bool _field5;
    float _field6;
    struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> _field7;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _field8;
    struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> _field9;
    _Bool _field10;
    id _field11;
    struct RenderState *_field12;
    struct unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext>> _field13;
    struct RenderTarget *_field14;
    struct TransactionBuffer _field15;
    struct unique_ptr<ggl::PerformanceHUD, std::__1::default_delete<ggl::PerformanceHUD>> _field16;
    struct deque<std::__1::pair<unsigned long, void *>, std::__1::allocator<std::__1::pair<unsigned long, void *>>> _field17;
    struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> _field18;
    struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> _field19;
    unsigned int _field20;
};

struct GenericShieldDrawStyle;

struct GeoCoordinates {
    struct Longitude _field1;
    struct Latitude _field2;
};

struct GeoServicesLoadJob;

struct GlobeAdapter {
    struct shared_ptr<vk::GlobeAdapterData> _field1;
    struct GlobeView *_field2;
    struct VKPoint _field3;
    struct {
        double _field1;
        double _field2;
    } _field4;
    struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile>>> _field5;
    shared_ptr_dd1f7020 _field6;
    _Bool _field7;
    _Bool _field8;
};

struct GlobeAdapterData;

struct GlobeOverlayContainer {
    weak_ptr_96fca551 _field1;
    struct GlobeViewImp *_field2;
    struct NSMutableArray *_field3;
    struct mutex _field4;
    double _field5;
};

struct GlobeView {
    CDUnknownFunctionPointerType *_field1;
};

struct GlobeViewImp {
    CDUnknownFunctionPointerType *_field1;
    struct AnchorManagerPrivate *_field2;
    struct Scene *_field3;
    struct Projection _field4;
    struct FrameLatLon _field5;
    _Bool _field6;
    basic_string_a1f69cfb _field7;
    basic_string_a1f69cfb _field8;
    basic_string_a1f69cfb _field9;
    struct AnimationTimer _field10;
    struct FrameLatLon _field11;
    struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound>> _field12;
    struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey>> _field13;
    struct vector<altitude::Position2d, std::__1::allocator<altitude::Position2d>> _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    unsigned int _field19;
    unsigned int _field20;
    unsigned int _field21;
    unsigned int _field22;
    struct VKClassicGlobeCanvas *_field23;
    struct DynamicMovement *_field24;
    _Bool _field25;
    _Bool _field26;
    int _field27;
    int _field28;
    int _field29;
    double _field30;
    double _field31;
    struct queue<altitude::Animation *, std::__1::deque<altitude::Animation *, std::__1::allocator<altitude::Animation *>>> _field32;
    struct AnimationManager _field33;
    struct Timer _field34;
    double _field35;
    _Bool _field36;
    _Bool _field37;
    basic_string_a1f69cfb _field38;
    double _field39;
    double _field40;
    double _field41;
    struct AnimationTimer _field42;
    struct FrameLatLon _field43;
    struct C3mmRequestManager *_field44;
    struct MeshElement *_field45;
    unsigned int _field46;
    struct FrameLatLon _field47;
    long long _field48;
    double _field49;
    _Bool _field50;
    _Bool _field51;
    struct map<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool), std::__1::less<altitude::TileId>, std::__1::allocator<std::__1::pair<const altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>>> _field52;
    struct LabelDataManagerPrivate *_field53;
    _Bool _field54;
    _Bool _field55;
    _Bool _field56;
    _Bool _field57;
    struct RouteLineManager *_field58;
    struct CompleteGlobeTileSetCullingGraph *_field59;
    struct CompleteGlobeTileSetLoader *_field60;
    struct TileLoader *_field61;
    struct TileSetNode *_field62;
    struct FadeTileEffectNode *_field63;
    struct CullingNode *_field64;
    struct MeshPager *_field65;
    struct EarthAdjustedViewNode *_field66;
    struct UserViewNode *_field67;
    struct View *_field68;
    struct ViewNode *_field69;
    struct ViewNode *_field70;
    float _field71;
    _Bool _field72;
    struct shared_ptr<bool> _field73;
    struct HeightRequestManager *_field74;
    struct map<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeViewImp::LessVector2i, std::__1::allocator<std::__1::pair<const altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>>> _field75;
    struct Mutex _field76;
    struct shared_ptr<altitude::Stylesheet> _field77;
    struct FlyoverTour *_field78;
    _Bool _field79;
    struct TriggerManager *_field80;
};

struct GridMesh;

struct HeightRequestManager;

struct Incident {
    struct GeoCoordinates _field1;
    struct String _field2;
    struct String _field3;
    int _field4;
    struct String _field5;
    struct String _field6;
    long long _field7;
    long long _field8;
    long long _field9;
    long long _field10;
    int _field11;
    unsigned char _field12;
    _Bool _field13;
    int _field14;
    unsigned char _field15;
    unsigned char _field16;
};

struct IndexData;

struct IndexDataTyped<unsigned short>;

struct InfoLabel;

struct IsoAlphaAtlas {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    float _field5;
    struct Texture2D *_field6;
};

struct LabelDataManagerPrivate;

struct LabelExternalIconElement;

struct LabelExternalIconRenderer;

struct LabelExternalObjectsModerator {
    struct fast_shared_ptr<vk::unsynchronized_weak_interface_ptr<vk::LabelExternalObjectsModerator>> _field1;
    struct LabelExternalIconRenderer *_field2;
    _Bool _field3;
    struct mutex _field4;
    int _field5;
    struct unordered_map<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>>> _field6;
    struct unordered_map<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>>> _field7;
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> _field8;
    unordered_set_6cd805f9 _field9;
    unordered_set_6cd805f9 _field10;
    struct unordered_map<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, std::__1::allocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<vk::LabelExternalTransitLink>>>> _field11;
    struct unordered_map<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>>> _field12;
    struct unordered_map<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyHash, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyEq, std::__1::allocator<std::__1::pair<const vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>>> _field13;
    struct unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long>>> _field14;
    struct unordered_map<unsigned long long, int, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, int>>> _field15;
};

struct LabelExternalPointFeature {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    Matrix_2bdd42a3 _field5;
    struct _retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field6;
    float _field7;
    float _field8;
    int _field9;
    unsigned char _field10;
    _Bool _field11;
    struct vector<vk::LabelExternalTextElement, std::__1::allocator<vk::LabelExternalTextElement>> _field12;
    struct vector<vk::LabelExternalIconElement, std::__1::allocator<vk::LabelExternalIconElement>> _field13;
    struct vector<std::__1::shared_ptr<vk::LabelAnnotationElementGroup>, std::__1::allocator<std::__1::shared_ptr<vk::LabelAnnotationElementGroup>>> _field14;
    struct vector<vk::LabelFeaturePlacementInfo, std::__1::allocator<vk::LabelFeaturePlacementInfo>> _field15;
    struct vector<std::__1::pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>>, std::__1::allocator<std::__1::pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>>>> _field16;
    struct vector<std::__1::shared_ptr<vk::LabelExternalDataElementGroup>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalDataElementGroup>>> _field17;
};

struct LabelExternalRoadFeature;

struct LabelExternalTextElement;

struct LabelFeature;

struct LabelFeatureInfo {
    unsigned long long _field1;
    unsigned char _field2;
    struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field3;
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> _field4;
    unsigned int _field5;
    basic_string_a1f69cfb _field6;
    basic_string_a1f69cfb _field7;
};

struct LabelFeaturePlacementInfo;

struct LabelFeatureThunkBase;

struct LabelIdentifier {
    unsigned int _field1;
};

struct LabelImageKey;

struct LabelManager;

struct LabelMapTile;

struct LabelNavJunctionInfo;

struct LabelPath;

struct LabelShieldEntry;

struct LabelStyle;

struct LabelStyleInfo;

struct LabelTile;

struct LabelTransitLine;

struct LabelTransitRoute;

struct LabelTransitRouteLine;

struct LabelTransitSupport {
    struct LabelManager *_field1;
    shared_ptr_887a193f _field2;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field3;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field4;
    struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    double _field10;
    struct vector<std::__1::shared_ptr<vk::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature>>> _field11;
    struct vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature>>> _field12;
    unordered_set_6cd805f9 _field13;
    struct vector<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature>>> _field14;
    struct vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature>>> _field15;
    struct map<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>, vk::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>>> _field16;
    struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field17;
    struct shared_ptr<vk::LabelTransitRoute> _field18;
    struct shared_ptr<vk::LabelTransitRouteLine> _field19;
    unsigned int _field20;
    struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, vk::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>>> _field21;
};

struct Latitude {
    unsigned int _field1;
};

struct Loader {
    struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> _loaderImpl;
};

struct LoaderImpl;

struct Longitude {
    unsigned int _field1;
};

struct MapCamera {
    struct View *_field1;
    struct View *_field2;
    struct Viewport *_field3;
    void *_field4;
};

struct Matrix<double, 2, 1> {
    double _e[2];
};

struct Matrix<double, 3, 1> {
    double _e[3];
};

struct Matrix<double, 4, 1> {
    double _field1[4];
};

struct Matrix<double, 4, 4> {
    double _e[16];
};

struct Matrix<float, 2, 1> {
    float _e[2];
};

struct Matrix<float, 3, 1> {
    float _e[3];
};

struct Matrix<float, 4, 1> {
    float _e[4];
};

struct Matrix<float, 4, 4> {
    float _e[16];
};

struct Matrix<int, 2, 1> {
    int _field1[2];
};

struct Matrix<unsigned char, 4, 1> {
    unsigned char _field1[4];
};

struct Matrix<unsigned int, 2, 1> {
    unsigned int _e[2];
};

struct Mesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct MeshCReflection;

struct MeshElement;

struct MeshMesh;

struct MeshPager;

struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_3f17ee4c _meshes;
    struct DataWrite<ggl::PolygonBase::CompressedVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonMesh::MeshMesh, ggl::PolygonMesh::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_0edf1665 _meshes;
    struct DataWrite<ggl::PolygonMesh::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshVendor<ggl::Building::BuildingMesh> {
    struct vector<ggl::Building::BuildingMesh *, std::__1::allocator<ggl::Building::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::Glow::MeshMesh> {
    struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
};

struct MeshVendor<ggl::PolygonBase::CompressedMeshMesh>;

struct MeshVendor<ggl::PolygonMesh::MeshMesh> {
    struct vector<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
};

struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> _field1;
    struct PrefilteredLineMesh *_field2;
};

struct MultiRange;

struct Mutex {
    void *mMutex;
};

struct NSMutableArray {
    Class _field1;
};

struct NavContext {
    CDUnknownFunctionPointerType *_field1;
    struct LabelManager *_field2;
};

struct NavLabel;

struct OESContext;

struct OffscreenQueue;

struct OnscreenTimestampData;

struct Ortho {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct Pass;

struct PatternedBatch;

struct PatternedLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::PatternedBatch *, std::__1::allocator<vk::PatternedBatch *>> _field2;
    struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
    shared_ptr_696716c4 _field5;
    struct shared_ptr<ggl::RenderState> _field6[2];
    unsigned long long _field7;
    struct PatternedManager *_field8;
    id _field9;
};

struct PatternedManager;

struct PendingQuery;

struct PerformanceHUD;

struct Perspective {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct PilledTrafficBatch;

struct PolygonDrawStyle;

struct PolygonRouteAttributes {
    unsigned int _field1;
    unsigned int _field2;
    _Bool _field3;
};

struct PolygonState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    int _field3;
    int _field4;
    unsigned int _field5;
};

struct PolylineCoordinate {
    unsigned int index;
    float offset;
};

struct Pool<ggl::RenderItem> {
    struct set<void *, std::__1::less<void *>, std::__1::allocator<void *>> mAllocatedSlabs;
    unsigned long long mElementsPerSlab;
    unsigned long long mSlabSize;
    struct FreeList *mFreeElement;
};

struct Pos2DUVMesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct Position2d;

struct Position3d {
    double _latitude;
    double _longitude;
    double _height;
};

struct PositionGeo3d {
    double _x;
    double _y;
    double _z;
};

struct PositionLatLonAlt {
    double _field1;
    double _field2;
    double _field3;
};

struct PrefilteredLineMesh;

struct Projection {
    struct Perspective _field1;
    struct Ortho _field2;
    _Bool _field3;
    _Bool _field4;
};

struct Range {
    unsigned long long _start;
    unsigned long long _count;
};

struct RasterOverlayData;

struct RealisticMesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct Record {
    unsigned int _field1;
    unsigned int _field2;
    float _field3;
    float _field4;
    long long _field5;
    int _field6;
    float _field7;
    float _field8;
    int _field9;
};

struct RenderBuffer;

struct RenderItem {
    CDUnknownFunctionPointerType *_vptr$RenderItem;
    char *_name;
    struct RenderState *_renderState;
    struct ShaderSetup *_shaderSetup;
    unsigned int _stencilRefValue;
    unsigned int _renderOrder;
    float _lineWidth;
    struct Mesh *_mesh;
    struct Range _range;
    struct Range *_ranges;
    unsigned long long _rangeCount;
};

struct RenderItemBatcher {
    struct vector<ggl::Range, std::__1::allocator<ggl::Range>> _activeRanges;
    unsigned long long _rangePoolCount;
    struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> _rangePool;
    struct vector<ggl::Range, std::__1::allocator<ggl::Range>> _activeRanges;
    struct RenderItem *_prototype;
    struct Pool<ggl::RenderItem> _pool;
    unsigned long long _rangePoolCount;
    struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> _rangePool;
};

struct RenderResource;

struct RenderState {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    struct DepthState _field3;
    struct ColorState _field4;
    struct BlendState _field5;
    struct StencilState _field6;
    struct ScissorState _field7;
    struct PolygonState _field8;
};

struct RenderTarget {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    struct vector<ggl::FragmentBuffer *, std::__1::allocator<ggl::FragmentBuffer *>> _field6;
    struct FragmentBuffer *_field7;
    unsigned int _field8;
    unsigned int _field9;
    _Bool _field10;
};

struct RenderTargetOperation {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
};

struct RenderTransaction;

struct RenderTree {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct Renderer {
    CDUnknownFunctionPointerType *_field1;
    struct Device *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    _Bool _field5;
    float _field6;
    struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> _field7;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _field8;
    struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> _field9;
};

struct ResourceAccessor {
    CDUnknownFunctionPointerType *_field1;
};

struct ResourceManager;

struct RibbonBatch<ggl::RoadRibbonDescriptor>;

struct RibbonBatch<ggl::TransitRibbonDescriptor>;

struct RibbonLayer<ggl::RoadRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[4];
};

struct RibbonLayer<ggl::TransitRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> _field2;
    struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
};

struct RoadBatch;

struct RoadLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::RoadBatch *, std::__1::allocator<vk::RoadBatch *>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[4];
    shared_ptr_696716c4 _field5;
    struct shared_ptr<ggl::RenderState> _field6[4];
    unsigned long long _field7;
    struct RoadManager *_field8;
    id _field9;
};

struct RoadManager;

struct RoadMetricsEntry {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
};

struct RoadPositions {
    struct map<vk::LabelIdentifier, vk::RoadPosition, std::__1::less<vk::LabelIdentifier>, std::__1::allocator<std::__1::pair<const vk::LabelIdentifier, vk::RoadPosition>>> _field1;
    struct LabelIdentifier _field2;
    unsigned int _field3;
    struct shared_ptr<vk::LabelPath> _field4;
    unsigned int _field5;
    _Bool _field6;
    struct set<void *, std::__1::less<void *>, std::__1::allocator<void *>> _field7;
    unsigned char _field8;
};

struct RouteJunctionInfo;

struct RouteLineArrowManager;

struct RouteLineLayer;

struct RouteLineManager;

struct RouteSegment;

struct Scene;

struct ScissorState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    Box_3fb92e00 _field3;
};

struct Setup {
    CDUnknownFunctionPointerType *_vptr$ShaderSetup;
    struct vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement>> _dataArray;
    struct vector<ggl::TextureBase *, std::__1::allocator<ggl::TextureBase *>> _textures;
    struct shared_ptr<ggl::Shader> _shader;
};

struct Shader;

struct ShaderLoadItem;

struct ShaderSetup;

struct SimpleTileKey;

struct SkyMesh;

struct SkyParameters {
    float _field1;
    float _field2;
    float _field3;
    Matrix_5173352a _field4;
    Matrix_5173352a _field5;
};

struct SolidTrafficBatch;

struct SpringDamper {
    double _position;
    double _velocity;
    double _acceleration;
    double _kSpring;
    double _kDamper;
    double _restingPosition;
    _Bool _directionIsPositive;
};

struct StencilManager {
    unsigned char _stencilStart;
    unsigned char _stencilEnd;
    unsigned char _stencilMax;
    struct ClearItem _stencilResetItem;
};

struct StencilState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    _Bool _field3;
    unsigned int _field4;
    int _field5;
    int _field6;
    unsigned int _field7;
    int _field8;
    int _field9;
    int _field10;
};

struct String {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
};

struct StringWithLocale;

struct StyleManager;

struct StyleQuery;

struct StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>> {
    shared_ptr_f06afc6c _field1;
    struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> _field2;
    _Bool _field3;
    unsigned char _field4;
};

struct StyleResolutionSession<std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>> {
    shared_ptr_f06afc6c _field1;
    struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>>> _field2;
    _Bool _field3;
    unsigned char _field4;
};

struct StyleSheet;

struct StyleTexture<vk::TransitLineSegment::StylePixel>;

struct Stylesheet;

struct Texture2D {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    int _field4;
    int _field5;
    unsigned int _field6;
    int _field7;
    int _field8;
    int _field9;
    float _field10;
    struct TextureDataAbstract *_field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    unsigned int _field15;
    unsigned int _field16;
    int _field17;
    int _field18;
};

struct Texture2DLoadItem;

struct TextureBase;

struct TextureBuffer;

struct TextureData2D {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    int _field3;
    unsigned int _field4;
    unsigned int _field5;
    char *_field6;
    char **_field7;
    unsigned long long _field8;
};

struct TextureDataAbstract;

struct TexturePool;

struct TexturedDrawable {
    struct unique_ptr<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>>> _field1;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _field2;
    shared_ptr_479d1306 _field3;
    basic_string_a1f69cfb _field4;
    shared_ptr_479d1306 _field5;
    basic_string_a1f69cfb _field6;
    shared_ptr_b80d91ee _field7;
};

struct TileBound;

struct TileExclusionArea;

struct TileLoader;

struct TileSetNode;

struct Timer {
    double _field1;
};

struct TrafficAccum {
    int _field1;
    struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> _field2;
    unsigned char _field3;
    int _field4;
    int _field5;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>>> *_field6;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>>> *_field7;
    int _field8;
    CDStruct_183601bc *_field9;
    shared_ptr_b80d91ee _field10;
    int _field11;
    float _field12;
};

struct TrafficDynamicTile;

struct TrafficLayer<ggl::PilledTrafficRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::PilledTrafficBatch *, std::__1::allocator<vk::PilledTrafficBatch *>> _field2;
    struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> _field3;
    struct RenderState *_field4[1];
    shared_ptr_696716c4 _field5;
    struct shared_ptr<ggl::RenderState> _field6[1];
    unsigned long long _field7;
    struct TrafficManager<ggl::PilledTrafficRibbonDescriptor> *_field8;
    id _field9;
};

struct TrafficLayer<ggl::SolidTrafficRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::SolidTrafficBatch *, std::__1::allocator<vk::SolidTrafficBatch *>> _field2;
    struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
    shared_ptr_696716c4 _field5;
    struct shared_ptr<ggl::RenderState> _field6[2];
    unsigned long long _field7;
    struct TrafficManager<ggl::SolidTrafficRibbonDescriptor> *_field8;
    id _field9;
};

struct TrafficManager<ggl::PilledTrafficRibbonDescriptor>;

struct TrafficManager<ggl::SolidTrafficRibbonDescriptor>;

struct TrafficMeshStyle {
    int _style[4];
};

struct TrafficSegment {
    struct PolylineCoordinate _field1;
    char _field2;
};

struct TrafficSkeletonTile {
    struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> m_records;
};

struct TransactionBuffer {
    struct deque<std::__1::shared_ptr<ggl::RenderTransaction>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>>> _field1;
};

struct TransitInterTileMediator;

struct TransitJunctionManager;

struct TransitLine;

struct TransitLink;

struct TransitLinksLabelFeature {
    CDUnknownFunctionPointerType *_field1;
    struct mutex _field2;
    unsigned long long _field3;
    struct shared_ptr<vk::LabelStyle> _field4;
    struct vector<std::__1::shared_ptr<vk::LabelStyle>, std::__1::allocator<std::__1::shared_ptr<vk::LabelStyle>>> _field5;
    float _field6;
    unsigned int _field7;
    unsigned int _field8;
    _Bool _field9;
    unsigned char _field10;
    struct LabelFeatureThunkBase *_field11;
    struct vector<geo::fast_shared_ptr<vk::TextDataStringInfo>, std::__1::allocator<geo::fast_shared_ptr<vk::TextDataStringInfo>>> _field12;
    struct vector<std::__1::shared_ptr<vk::TextDataFontVariant>, std::__1::allocator<std::__1::shared_ptr<vk::TextDataFontVariant>>> _field13;
    unsigned long long _field14;
    unsigned char _field15;
    struct shared_ptr<vk::LabelExternalRoadFeature> _field16;
    struct vector<vk::LabelShieldEntry, std::__1::allocator<vk::LabelShieldEntry>> _field17;
    struct RoadMetricsEntry _field18[20];
    struct RoadPositions _field19;
    struct vector<bool, std::__1::allocator<bool>> _field20;
    _Bool _field21;
    _Bool _field22;
    struct vector<vk::StringWithLocale, std::__1::allocator<vk::StringWithLocale>> _field23;
    struct vector<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>, std::__1::allocator<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>>> _field24;
    struct vector<vk::TransitLinksLabelFeature::LabelTransitLine, std::__1::allocator<vk::TransitLinksLabelFeature::LabelTransitLine>> _field25;
    struct map<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *, std::__1::less<GEOTransitLink *>, std::__1::allocator<std::__1::pair<GEOTransitLink *const, vk::TransitLinksLabelFeature::LabelTransitLink *>>> _field26;
    unsigned char _field27;
    struct vector<vk::TransitLinksLabelFeature::LabelStyleInfo, std::__1::allocator<vk::TransitLinksLabelFeature::LabelStyleInfo>> _field28;
    struct unordered_map<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char, vk::TransitLinksLabelFeature::AttributesHash, vk::TransitLinksLabelFeature::AttributesEqual, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>>> _field29;
    struct mutex _field30;
    _Bool _field31;
    struct vector<vk::TransitLinksLabelFeature::WorkUnit, std::__1::allocator<vk::TransitLinksLabelFeature::WorkUnit>> _field32;
};

struct TransitNodeFeaturePool;

struct TriggerManager;

struct UserViewNode;

struct VKCacheKey {
    unsigned int a;
    unsigned int b;
    unsigned int c;
    unsigned int d;
};

struct VKCameraState {
    struct VKPoint position;
    CDStruct_aa5aacbc orientation;
    float aspectRatio;
    float verticalFieldOfView;
    float horizontalOffset;
};

struct VKCircularBuffer<double> {
    struct vector<double, std::__1::allocator<double>> _field1;
    unsigned long long _field2;
    _Bool _field3;
    double _field4;
};

struct VKClassicGlobeCanvas;

struct VKEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct VKFootprintConvexHull_struct {
    int edgeCount;
    struct VKPoint edgeOrigin[6];
    Matrix_6e1d3589 edgeNormal[6];
};

struct VKGlobeRouteSplit {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct VKGlobeStylesheet;

struct VKIconStyleInfo {
    unsigned char iconStyle;
    Matrix_5173352a iconBadgeColor;
    Matrix_5173352a iconGradientColor[2];
    Matrix_5173352a iconBadgeLightColor;
    unsigned char iconBadgeLightBlendMode;
    Matrix_5173352a iconGlyphColor;
    unsigned char iconGlyphStyle;
    unsigned char iconGlyphBlendMode;
    float iconHaloSize;
    Matrix_5173352a iconHaloColor;
    struct CGSize iconDropShadowOffset;
    float iconDropShadowSize;
    Matrix_5173352a iconDropShadowColor;
    float iconCornerRadius;
    float iconBrightness;
    float iconBevelAmount;
    unsigned int iconSourceStyleAttributeKey;
    unsigned int iconSourceStyleMultipoiAttributeKey;
};

struct VKLabelNavRouteRoadEdge {
    struct PolylineCoordinate _field1;
    struct PolylineCoordinate _field2;
    CDStruct_183601bc *_field3;
};

struct VKLabelStyle {
    _Bool _field1;
    unsigned int _field2;
    unsigned int _field3;
    float _field4;
    _Bool _field5;
    FixedPointVector_f041f768 _field6;
    FixedPointVector_f041f768 _field7;
    unsigned int _field8;
    float _field9;
    float _field10;
    int _field11;
    int _field12;
    struct VKIconStyleInfo _field13;
    unsigned char _field14;
    _Bool _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    Matrix_5173352a _field21;
    Matrix_5173352a _field22;
    unsigned char _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    float _field27;
    float _field28;
    float _field29;
    float _field30;
    float _field31;
    float _field32;
    float _field33;
    float _field34;
    float _field35;
    float _field36;
    float _field37;
    float _field38;
    float _field39;
    float _field40;
    _Bool _field41;
    char _field42;
    char _field43;
    char _field44;
    unsigned char _field45;
    int _field46;
    int _field47;
    float _field48;
    float _field49;
    float _field50;
    float _field51;
    FixedPointVector_f041f768 _field52;
    unsigned char _field53;
    unsigned char _field54;
    unsigned char _field55;
    unsigned char _field56;
    unsigned char _field57;
    unsigned char _field58;
    unsigned short _field59;
    unsigned char _field60;
    unsigned char _field61;
    unsigned char _field62;
    unsigned char _field63;
    unsigned char _field64;
    _Bool _field65;
    _Bool _field66;
    _Bool _field67;
    float _field68;
    int _field69;
    char _field70;
    unsigned char _field71;
    _Bool _field72;
    _Bool _field73;
    float _field74;
    char _field75;
    char _field76;
    Matrix_5173352a _field77;
    _Bool _field78;
    basic_string_a1f69cfb _field79;
    basic_string_a1f69cfb _field80;
    basic_string_a1f69cfb _field81;
    basic_string_a1f69cfb _field82;
    basic_string_a1f69cfb _field83;
    struct FontOptions _field84;
};

struct VKNavigationCameraModel {
    double _halfVerticalFov;
    double _horizontalFov;
    double _tanHalfHorizontalFov;
    double _courseOverride;
    struct SpringDamper _pitchSpring;
    struct AngularSpringDamper _courseSpring;
    struct SpringDamper _referenceScreenOffsetSpring;
    struct SpringDamper _boomLengthSpring;
    State_3e0671f0 _targetState;
    double _previousUpdateTime;
};

struct VKPerformanceTestResult_struct {
    char *_field1;
    float _field2[5];
};

struct VKPoint {
    double x;
    double y;
    double z;
};

struct VKRasterTileKey {
    unsigned int x;
    unsigned int y;
    unsigned int z;
    unsigned int pointSize;
};

struct VKRequestKey {
    struct {
        struct {
            double _field1;
            double _field2;
        } _field1;
        struct {
            double _field1;
            double _field2;
        } _field2;
    } _field1;
    long long _field2;
    struct CGSize _field3;
    id _field4;
    unsigned short _field5;
};

struct VKTileKey {
    unsigned int z;
    int x;
    int y;
    unsigned int pointSize;
};

struct Vector2i {
    int _x;
    int _y;
};

struct Vector3d {
    double _x;
    double _y;
    double _z;
};

struct VehicleState {
    _Bool _isParked;
};

struct View;

struct ViewNode;

struct ViewTransform;

struct Viewer {
    CDUnknownFunctionPointerType *_field1;
};

struct Viewport;

struct WorkUnit;

struct ZoomRange {
    float min;
    float max;
};

struct _GEOGenericContainer<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>>> _list;
    struct unordered_map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOTileKey {
    unsigned int z:6;
    unsigned int x:26;
    unsigned int y:26;
    unsigned int type:6;
    unsigned int pixelSize:8;
    unsigned int textScale:8;
    unsigned int provider:8;
    unsigned int expires:1;
    unsigned int reserved1:7;
    unsigned char reserved2[4];
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _VKRealisticPolygonMetaData;

struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep {
        union {
            struct __long {
                unsigned long long _field1;
                unsigned long long _field2;
                char *_field3;
            } _field1;
            struct __short {
                union {
                    unsigned char _field1;
                    char _field2;
                } _field1;
                char _field2[23];
            } _field2;
            struct __raw {
                unsigned long long _field1[3];
            } _field3;
        } _field1;
    } _field1;
};

struct __hash_node<GEOComposedRouteSection *, void *>;

struct __hash_node<TransitLineWithLink, void *>;

struct __hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>;

struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>;

struct __hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>;

struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>;

struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>;

struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>;

struct __hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>;

struct __hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>;

struct __hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>;

struct __hash_node<unsigned long long, void *>;

struct __list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>;

struct __list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>;

struct __list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>;

struct __list_node<vk::TransitDisplayConnection, void *>;

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _fast_shared_ptr_control;

struct _geo_weak_ptr<id> {
    id _p;
};

struct _release_objc;

struct _retain_objc;

struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    GEOVectorTile *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKRouteContext *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
};

struct deque<altitude::Animation *, std::__1::allocator<altitude::Animation *>> {
    struct __split_buffer<altitude::Animation **, std::__1::allocator<altitude::Animation **>> {
        struct Animation ***_field1;
        struct Animation ***_field2;
        struct Animation ***_field3;
        struct __compressed_pair<altitude::Animation ***, std::__1::allocator<altitude::Animation **>> {
            struct Animation ***_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<altitude::Animation *>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> {
    struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem>*, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>*>> {
        struct fast_shared_ptr<ggl::QueryItem> **_field1;
        struct fast_shared_ptr<ggl::QueryItem> **_field2;
        struct fast_shared_ptr<ggl::QueryItem> **_field3;
        struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem>**, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>*>> {
            struct fast_shared_ptr<ggl::QueryItem> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery>> {
    struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *>> {
        struct PendingQuery **_field1;
        struct PendingQuery **_field2;
        struct PendingQuery **_field3;
        struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *>> {
            struct PendingQuery **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::pair<unsigned long, void *>, std::__1::allocator<std::__1::pair<unsigned long, void *>>> {
    struct __split_buffer<std::__1::pair<unsigned long, void *>*, std::__1::allocator<std::__1::pair<unsigned long, void *>*>> {
        struct pair<unsigned long, void *> **_field1;
        struct pair<unsigned long, void *> **_field2;
        struct pair<unsigned long, void *> **_field3;
        struct __compressed_pair<std::__1::pair<unsigned long, void *>**, std::__1::allocator<std::__1::pair<unsigned long, void *>*>> {
            struct pair<unsigned long, void *> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<unsigned long, void *>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::shared_ptr<ggl::RenderTransaction>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>>> {
    struct __split_buffer<std::__1::shared_ptr<ggl::RenderTransaction>*, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>*>> {
        struct shared_ptr<ggl::RenderTransaction> **_field1;
        struct shared_ptr<ggl::RenderTransaction> **_field2;
        struct shared_ptr<ggl::RenderTransaction> **_field3;
        struct __compressed_pair<std::__1::shared_ptr<ggl::RenderTransaction>**, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>*>> {
            struct shared_ptr<ggl::RenderTransaction> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>>> {
        unsigned long long _field1;
    } _field3;
};

struct fast_shared_ptr<ggl::PolygonBase::CompressedMeshMesh> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<ggl::QueryItem>;

struct fast_shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<ggl::RealisticRoadShadow::RealisticMesh> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<vk::RouteLineSection> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<vk::TextDataStringInfo>;

struct fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>;

struct fast_shared_ptr<vk::unsynchronized_weak_interface_ptr<vk::LabelExternalObjectsModerator>> {
    struct _fast_shared_ptr_control *_field1;
};

struct function<void (const vk::RoadPiece &)> {
    struct type _field1;
    struct __base<void (const vk::RoadPiece &)> *_field2;
};

struct list<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> {
        struct __list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> *__prev_;
        struct __list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
        struct __list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
        struct __list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
        struct __list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
        struct __list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<vk::TransitDisplayConnection, std::__1::allocator<vk::TransitDisplayConnection>> {
    struct __list_node_base<vk::TransitDisplayConnection, void *> {
        struct __list_node<vk::TransitDisplayConnection, void *> *__prev_;
        struct __list_node<vk::TransitDisplayConnection, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<vk::TransitDisplayConnection, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct map<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *, std::__1::less<GEOTransitLink *>, std::__1::allocator<std::__1::pair<GEOTransitLink *const, vk::TransitLinksLabelFeature::LabelTransitLink *>>> {
    struct __tree<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, std::__1::__map_value_compare<GEOTransitLink *, std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, std::__1::less<GEOTransitLink *>, true>, std::__1::allocator<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>>> {
        struct __tree_node<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<GEOTransitLink *, std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, std::__1::less<GEOTransitLink *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData>>>> {
    struct __tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>>> {
        struct __tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
    struct __tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
        struct __tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool), std::__1::less<altitude::TileId>, std::__1::allocator<std::__1::pair<const altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>>> {
    struct __tree<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, std::__1::__map_value_compare<altitude::TileId, std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, std::__1::less<altitude::TileId>, true>, std::__1::allocator<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>>> {
        struct __tree_node<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<altitude::TileId, std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, std::__1::less<altitude::TileId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeViewImp::LessVector2i, std::__1::allocator<std::__1::pair<const altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>>> {
    struct __tree<std::__1::__value_type<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>, std::__1::__map_value_compare<altitude::Vector2i, std::__1::__value_type<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>, altitude::GlobeViewImp::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>>> {
        struct __tree_node<std::__1::__value_type<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<altitude::Vector2i, std::__1::__value_type<altitude::Vector2i, std::__1::pair<bool, altitude::Position3d>>, altitude::GlobeViewImp::LessVector2i, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>, NSStringMapComparison, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>>>> {
    struct __tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>>, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>>, NSStringMapComparison, true>, std::__1::allocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>>>> {
        struct __tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleManager>>, NSStringMapComparison, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
    struct __tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
        struct __tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::TexturedDrawable>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>, vk::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>>> {
    struct __tree<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>, vk::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>>, vk::LabelExternalRoadFeatureLess, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>>> {
    struct __tree<std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>>> {
        struct __tree_node<std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, std::__1::less<unsigned int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<vk::Anchor *, float, std::__1::less<vk::Anchor *>, std::__1::allocator<std::__1::pair<vk::Anchor *const, float>>> {
    struct __tree<std::__1::__value_type<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<vk::Anchor *, float>>> {
        struct __tree_node<std::__1::__value_type<vk::Anchor *, float>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<vk::Anchor *, float>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<vk::LabelIdentifier, vk::RoadPosition, std::__1::less<vk::LabelIdentifier>, std::__1::allocator<std::__1::pair<const vk::LabelIdentifier, vk::RoadPosition>>> {
    struct __tree<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, std::__1::__map_value_compare<vk::LabelIdentifier, std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, std::__1::less<vk::LabelIdentifier>, true>, std::__1::allocator<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>>> {
        struct __tree_node<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::LabelIdentifier, std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, std::__1::less<vk::LabelIdentifier>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct pair<TransitLineWithLink, float>;

struct pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>>;

struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>;

struct pair<unsigned long, void *>;

struct pair<unsigned short, unsigned int>;

struct pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>>;

struct queue<altitude::Animation *, std::__1::deque<altitude::Animation *, std::__1::allocator<altitude::Animation *>>> {
    struct deque<altitude::Animation *, std::__1::allocator<altitude::Animation *>> _field1;
};

struct set<void *, std::__1::less<void *>, std::__1::allocator<void *>> {
    struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *>> {
        struct __tree_node<void *, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<void *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<void *>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<altitude::Stylesheet> {
    struct Stylesheet *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<bool> {
    _Bool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BitmapData> {
    struct BitmapData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Buffer> {
    struct Buffer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant>> {
    struct ConstantDataTyped<ggl::AnimatableTexture::Variant> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog>> {
    struct ConstantDataTyped<ggl::Fog::Skyfog> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Grid::Style>> {
    struct ConstantDataTyped<ggl::Grid::Style> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::GridBase::GridView>> {
    struct ConstantDataTyped<ggl::GridBase::GridView> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>> {
    struct ConstantDataTyped<ggl::PolygonFill::Fill> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic>> {
    ConstantDataTyped_b1bd3bad *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::SimpleGrid::Style>> {
    struct ConstantDataTyped<ggl::SimpleGrid::Style> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Sky::Style>> {
    struct ConstantDataTyped<ggl::Sky::Style> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>> {
    struct ConstantDataTyped<ggl::Tile::View> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Debug::BaseMesh> {
    struct BaseMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::DebugRenderer>;

struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GLDevice> {
    struct GLDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GLRenderer> {
    struct GLRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GridBase::GridMesh> {
    struct GridMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::IndexData> {
    struct IndexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::IndexDataTyped<unsigned short>> {
    struct IndexDataTyped<unsigned short> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonBase::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> {
    struct RealisticMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderItem> {
    struct RenderItem *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderQueue> {
    struct RenderQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderState> {
    struct RenderState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderTransaction> {
    struct RenderTransaction *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Shader> {
    struct Shader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::Shader::Setup> {
    struct Setup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::SkyMesh> {
    struct SkyMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureAlphaMask::Shader::Setup> {
    struct Setup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureMesh::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureWithBrightness::Shader::Setup> {
    struct Setup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::VertexData>;

struct shared_ptr<gss::BuildingDrawStyle>;

struct shared_ptr<gss::CartoStyle> {
    struct CartoStyle *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::GenericShieldDrawStyle> {
    struct GenericShieldDrawStyle *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::PolygonDrawStyle> {
    struct PolygonDrawStyle *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StyleManager> {
    struct StyleManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StyleQuery> {
    struct StyleQuery *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StyleSheet> {
    struct StyleSheet *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::RasterOverlayData> {
    struct RasterOverlayData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TexturedDrawable> {
    struct TexturedDrawable *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::AnchorContext> {
    struct AnchorContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::AnchorFactory> {
    struct AnchorFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::GlobeAdapterData> {
    struct GlobeAdapterData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::InfoLabel> {
    struct InfoLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelAnnotationElementGroup>;

struct shared_ptr<vk::LabelExternalDataElementGroup>;

struct shared_ptr<vk::LabelExternalPointFeature>;

struct shared_ptr<vk::LabelExternalRoadFeature> {
    struct LabelExternalRoadFeature *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::LabelFeature> {
    struct LabelFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelPath> {
    struct LabelPath *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::LabelStyle> {
    struct LabelStyle *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelTransitRoute> {
    struct LabelTransitRoute *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::LabelTransitRouteLine> {
    struct LabelTransitRouteLine *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::TextDataFontVariant>;

struct shared_ptr<vk::TransitConnectedNode>;

struct shared_ptr<vk::TransitInterTileMediator> {
    struct TransitInterTileMediator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::TransitNode>;

struct shared_ptr<vk::TransitOrphanNode>;

struct shared_ptr<vk::TransitParentNode>;

struct shared_ptr<vk::VKGlobeStylesheet> {
    struct VKGlobeStylesheet *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::ViewTransform> {
    struct ViewTransform *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<zilch::TrafficDynamicTile> {
    struct TrafficDynamicTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char _field1[24];
};

struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas>> {
    struct __compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas>> {
        struct AlphaAtlas *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem>> {
    struct __compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem>> {
        struct ClearItem *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Clut::Shader::Setup, std::__1::default_delete<ggl::Clut::Shader::Setup>> {
    struct __compressed_pair<ggl::Clut::Shader::Setup *, std::__1::default_delete<ggl::Clut::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> {
    struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer>> {
        struct CommandBuffer *_field1;
    } _field1;
};

struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
    struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My>*, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
        struct DataWrite<ggl::ColoredText::My> *_field1;
    } _field1;
};

struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> {
    struct __compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh>> {
        struct BaseMesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
    struct __compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
        struct BaseMesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Building::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup>>> {
        struct FragmentedPool<ggl::Building::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingFlat::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingShadow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingTop::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Debug::BaseMesh>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Debug::BaseMesh>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh>>> {
        struct FragmentedPool<ggl::Debug::BaseMesh> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Debug::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Debug::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup>>> {
        struct FragmentedPool<ggl::Debug::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>>> {
        struct FragmentedPool<ggl::DebugPoints::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup>>> {
        struct FragmentedPool<ggl::FoggedBuilding::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>>> {
        struct FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Glow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Glow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup>>> {
        struct FragmentedPool<ggl::Glow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::GlowAlpha::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::GlowAlpha::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::GlowAlpha::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::GlowAlpha::Shader::Setup>>> {
        struct FragmentedPool<ggl::GlowAlpha::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonFill::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>>> {
        struct FragmentedPool<ggl::PrefilteredLine::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticRoad::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticTexture::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> {
        struct FragmentedPool<ggl::RenderItem> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Grid::Shader::Setup, std::__1::default_delete<ggl::Grid::Shader::Setup>> {
    struct __compressed_pair<ggl::Grid::Shader::Setup *, std::__1::default_delete<ggl::Grid::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
    struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
        struct IsoAlphaAtlas *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> {
    struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl>> {
        struct LoaderImpl *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Mesh, std::__1::default_delete<ggl::Mesh>> {
    struct __compressed_pair<ggl::Mesh *, std::__1::default_delete<ggl::Mesh>> {
        struct Mesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::Building::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::Building::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh>>> {
        MeshVendor_3faa0a72 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
        MeshVendor_c6d8e5cd *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::Glow::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::Glow::MeshMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> {
        MeshVendor_43d71dca *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>>> {
        struct MeshVendor<ggl::PolygonBase::CompressedMeshMesh> *_field1;
    } _field1;
};

struct unique_ptr<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>>> {
        MeshVendor_82aa5b9e *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
        MeshVendor_8027e961 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext>> {
    struct __compressed_pair<ggl::OESContext *, std::__1::default_delete<ggl::OESContext>> {
        struct OESContext *_field1;
    } _field1;
};

struct unique_ptr<ggl::PerformanceHUD, std::__1::default_delete<ggl::PerformanceHUD>> {
    struct __compressed_pair<ggl::PerformanceHUD *, std::__1::default_delete<ggl::PerformanceHUD>> {
        struct PerformanceHUD *_field1;
    } _field1;
};

struct unique_ptr<ggl::PolygonFill::Shader::Setup, std::__1::default_delete<ggl::PolygonFill::Shader::Setup>> {
    struct __compressed_pair<ggl::PolygonFill::Shader::Setup *, std::__1::default_delete<ggl::PolygonFill::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> {
    struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer>> {
        struct RenderBuffer *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> {
    struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem>> {
        struct RenderItem *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> {
    struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue>> {
        struct RenderQueue *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> {
    struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState>> {
        struct RenderState *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> {
    struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget>> {
        struct RenderTarget *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderTargetOperation, std::__1::default_delete<ggl::RenderTargetOperation>> {
    struct __compressed_pair<ggl::RenderTargetOperation *, std::__1::default_delete<ggl::RenderTargetOperation>> {
        struct RenderTargetOperation *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>, std::__1::default_delete<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>>> {
    struct __compressed_pair<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>*, std::__1::default_delete<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>>> {
        RibbonLayer_0b5240d1 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>, std::__1::default_delete<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>>> {
    struct __compressed_pair<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>*, std::__1::default_delete<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>>> {
        RibbonLayer_d95b4043 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::SimpleGrid::Shader::Setup, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup>> {
    struct __compressed_pair<ggl::SimpleGrid::Shader::Setup *, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> {
    struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D>> {
        struct Texture2D *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture::Shader::Setup, std::__1::default_delete<ggl::Texture::Shader::Setup>> {
    struct __compressed_pair<ggl::Texture::Shader::Setup *, std::__1::default_delete<ggl::Texture::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TextureBuffer, std::__1::default_delete<ggl::TextureBuffer>> {
    struct __compressed_pair<ggl::TextureBuffer *, std::__1::default_delete<ggl::TextureBuffer>> {
        struct TextureBuffer *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TexturePool, std::__1::default_delete<ggl::TexturePool>> {
    struct __compressed_pair<ggl::TexturePool *, std::__1::default_delete<ggl::TexturePool>> {
        struct TexturePool *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TextureWithReverseAlpha::Shader::Setup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup>> {
    struct __compressed_pair<ggl::TextureWithReverseAlpha::Shader::Setup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TransitLineRibbon::Shader::Setup, std::__1::default_delete<ggl::TransitLineRibbon::Shader::Setup>> {
    struct __compressed_pair<ggl::TransitLineRibbon::Shader::Setup *, std::__1::default_delete<ggl::TransitLineRibbon::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager>> {
    struct __compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager>> {
        struct DebugConsoleManager *__first_;
    } __ptr_;
};

struct unique_ptr<md::MapCamera, std::__1::default_delete<md::MapCamera>> {
    struct __compressed_pair<md::MapCamera *, std::__1::default_delete<md::MapCamera>> {
        struct MapCamera *__first_;
    } __ptr_;
};

struct unique_ptr<md::OffscreenQueue, std::__1::default_delete<md::OffscreenQueue>> {
    struct __compressed_pair<md::OffscreenQueue *, std::__1::default_delete<md::OffscreenQueue>> {
        struct OffscreenQueue *__first_;
    } __ptr_;
};

struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> {
    struct __compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue>> {
        struct RenderQueue *__first_;
    } __ptr_;
};

struct unique_ptr<md::RenderTree, std::__1::default_delete<md::RenderTree>> {
    struct __compressed_pair<md::RenderTree *, std::__1::default_delete<md::RenderTree>> {
        struct RenderTree *__first_;
    } __ptr_;
};

struct unique_ptr<md::StyleTexture<vk::TransitLineSegment::StylePixel>, std::__1::default_delete<md::StyleTexture<vk::TransitLineSegment::StylePixel>>> {
    struct __compressed_pair<md::StyleTexture<vk::TransitLineSegment::StylePixel>*, std::__1::default_delete<md::StyleTexture<vk::TransitLineSegment::StylePixel>>> {
        struct StyleTexture<vk::TransitLineSegment::StylePixel> *__first_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<GEOComposedRouteSection *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<GEOComposedRouteSection *, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>>> {
        struct __hash_node<GEOComposedRouteSection *, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<TransitLineWithLink, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<TransitLineWithLink, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>*>>> {
        struct __hash_node<TransitLineWithLink, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<unsigned long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>>> {
        struct __hash_node<unsigned long long, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<vk::GlobeAdapter, std::__1::default_delete<vk::GlobeAdapter>> {
    struct __compressed_pair<vk::GlobeAdapter *, std::__1::default_delete<vk::GlobeAdapter>> {
        struct GlobeAdapter *__first_;
    } __ptr_;
};

struct unique_ptr<vk::PatternedLayer, std::__1::default_delete<vk::PatternedLayer>> {
    struct __compressed_pair<vk::PatternedLayer *, std::__1::default_delete<vk::PatternedLayer>> {
        struct PatternedLayer *__first_;
    } __ptr_;
};

struct unique_ptr<vk::PatternedManager, std::__1::default_delete<vk::PatternedManager>> {
    struct __compressed_pair<vk::PatternedManager *, std::__1::default_delete<vk::PatternedManager>> {
        struct PatternedManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer>> {
    struct __compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer>> {
        struct RoadLayer *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RoadManager, std::__1::default_delete<vk::RoadManager>> {
    struct __compressed_pair<vk::RoadManager *, std::__1::default_delete<vk::RoadManager>> {
        struct RoadManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>;

struct unique_ptr<vk::RouteLineArrowManager, std::__1::default_delete<vk::RouteLineArrowManager>> {
    struct __compressed_pair<vk::RouteLineArrowManager *, std::__1::default_delete<vk::RouteLineArrowManager>> {
        struct RouteLineArrowManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RouteLineLayer, std::__1::default_delete<vk::RouteLineLayer>> {
    struct __compressed_pair<vk::RouteLineLayer *, std::__1::default_delete<vk::RouteLineLayer>> {
        struct RouteLineLayer *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RouteLineManager, std::__1::default_delete<vk::RouteLineManager>> {
    struct __compressed_pair<vk::RouteLineManager *, std::__1::default_delete<vk::RouteLineManager>> {
        struct RouteLineManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor>>> {
    struct __compressed_pair<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor>*, std::__1::default_delete<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor>>> {
        TrafficLayer_4953bdcb *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor>>> {
    struct __compressed_pair<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor>*, std::__1::default_delete<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor>>> {
        TrafficLayer_232260f3 *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TrafficManager<ggl::PilledTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficManager<ggl::PilledTrafficRibbonDescriptor>>> {
    struct __compressed_pair<vk::TrafficManager<ggl::PilledTrafficRibbonDescriptor>*, std::__1::default_delete<vk::TrafficManager<ggl::PilledTrafficRibbonDescriptor>>> {
        struct TrafficManager<ggl::PilledTrafficRibbonDescriptor> *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TrafficManager<ggl::SolidTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficManager<ggl::SolidTrafficRibbonDescriptor>>> {
    struct __compressed_pair<vk::TrafficManager<ggl::SolidTrafficRibbonDescriptor>*, std::__1::default_delete<vk::TrafficManager<ggl::SolidTrafficRibbonDescriptor>>> {
        struct TrafficManager<ggl::SolidTrafficRibbonDescriptor> *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TransitJunctionManager, std::__1::default_delete<vk::TransitJunctionManager>> {
    struct __compressed_pair<vk::TransitJunctionManager *, std::__1::default_delete<vk::TransitJunctionManager>> {
        struct TransitJunctionManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TransitNodeFeaturePool, std::__1::default_delete<vk::TransitNodeFeaturePool>> {
    struct __compressed_pair<vk::TransitNodeFeaturePool *, std::__1::default_delete<vk::TransitNodeFeaturePool>> {
        struct TransitNodeFeaturePool *__first_;
    } __ptr_;
};

struct unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList>>> {
    struct __hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, std::__1::allocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<vk::LabelExternalTransitLink>>>> {
    struct __hash_table<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, std::__1::hash<const GEOTransitLink *>, true>, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, std::__1::equal_to<const GEOTransitLink *>, true>, std::__1::allocator<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, std::__1::hash<const GEOTransitLink *>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<vk::LabelExternalTransitLink>>, std::__1::equal_to<const GEOTransitLink *>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char, vk::TransitLinksLabelFeature::AttributesHash, vk::TransitLinksLabelFeature::AttributesEqual, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>>> {
    struct __hash_table<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, std::__1::__unordered_map_hasher<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesHash, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesEqual, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesEqual, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>>> {
    struct __hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, int, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, int>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, vk::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, vk::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, vk::LabelTransitSupport::TransitLineColorKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, VKPolygonGroup *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, VKPolygonGroup *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, int, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, int>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, int>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, int>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<vk::LabelExternalObject>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<vk::TransitNode *, std::__1::hash<vk::TransitNode *>, std::__1::equal_to<vk::TransitNode *>, std::__1::allocator<vk::TransitNode *>>>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<GEOFeatureStylePair, std::__1::allocator<GEOFeatureStylePair>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, unsigned long long>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, vk::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, vk::PolygonRouteAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyHash, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyEq, std::__1::allocator<std::__1::pair<const vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, std::__1::__unordered_map_hasher<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyHash, true>, std::__1::__unordered_map_equal<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyEq, true>, std::__1::allocator<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, std::__1::__hash_value_type<vk::LabelExternalObjectsModerator::LinesOnRouteMapKey, unsigned long long>, vk::LabelExternalObjectsModerator::LinesOnRouteMapKeyEq, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>, std::__1::hash<vk::PatternedBatchKey>, std::__1::equal_to<vk::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>, std::__1::hash<vk::RoadBatchKey>, std::__1::equal_to<vk::RoadBatchKey>, std::__1::allocator<std::__1::pair<const vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, std::__1::hash<vk::TrafficBatchKey>, true>, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, std::__1::equal_to<vk::TrafficBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, std::__1::hash<vk::TrafficBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon>>>>>, std::__1::equal_to<vk::TrafficBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::hash<vk::TrafficBatchKey>, true>, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::equal_to<vk::TrafficBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::hash<vk::TrafficBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::equal_to<vk::TrafficBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *>>> {
    struct __hash_table<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_set<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *>> {
    struct __hash_table<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *>> {
        struct unique_ptr<std::__1::__hash_node<GEOComposedRouteSection *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*> {
                struct __hash_node<GEOComposedRouteSection *, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<GEOComposedRouteSection *>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<GEOComposedRouteSection *>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
    struct __hash_table<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
        struct unique_ptr<std::__1::__hash_node<TransitLineWithLink, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> {
                struct __hash_node<TransitLineWithLink, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, TransitLineWithLinkHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<TransitLineWithLink>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node<unsigned long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> {
                struct __hash_node<unsigned long long, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<LabelNavJunctionInfo, std::__1::allocator<LabelNavJunctionInfo>> {
    struct LabelNavJunctionInfo *__begin_;
    struct LabelNavJunctionInfo *__end_;
    struct __compressed_pair<LabelNavJunctionInfo *, std::__1::allocator<LabelNavJunctionInfo>> {
        struct LabelNavJunctionInfo *__first_;
    } __end_cap_;
};

struct vector<OnscreenTimestampData, std::__1::allocator<OnscreenTimestampData>> {
    struct OnscreenTimestampData *__begin_;
    struct OnscreenTimestampData *__end_;
    struct __compressed_pair<OnscreenTimestampData *, std::__1::allocator<OnscreenTimestampData>> {
        struct OnscreenTimestampData *__first_;
    } __end_cap_;
};

struct vector<RouteJunctionInfo, std::__1::allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, std::__1::allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
};

struct vector<RouteSegment, std::__1::allocator<RouteSegment>> {
    struct RouteSegment *__begin_;
    struct RouteSegment *__end_;
    struct __compressed_pair<RouteSegment *, std::__1::allocator<RouteSegment>> {
        struct RouteSegment *__first_;
    } __end_cap_;
};

struct vector<TrafficSegment, std::__1::allocator<TrafficSegment>> {
    struct TrafficSegment *__begin_;
    struct TrafficSegment *__end_;
    struct __compressed_pair<TrafficSegment *, std::__1::allocator<TrafficSegment>> {
        struct TrafficSegment *__first_;
    } __end_cap_;
};

struct vector<VKBuildingHeightMap, std::__1::allocator<VKBuildingHeightMap>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKBuildingHeightMap *, std::__1::allocator<VKBuildingHeightMap>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VKMapTile *, std::__1::allocator<VKMapTile *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<VKRect, std::__1::allocator<VKRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKRect *, std::__1::allocator<VKRect>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VKTileKey, std::__1::allocator<VKTileKey>> {
    struct VKTileKey *__begin_;
    struct VKTileKey *__end_;
    struct __compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey>> {
        struct VKTileKey *__first_;
    } __end_cap_;
};

struct vector<_VKRealisticPolygonMetaData, std::__1::allocator<_VKRealisticPolygonMetaData>> {
    struct _VKRealisticPolygonMetaData *__begin_;
    struct _VKRealisticPolygonMetaData *__end_;
    struct __compressed_pair<_VKRealisticPolygonMetaData *, std::__1::allocator<_VKRealisticPolygonMetaData>> {
        struct _VKRealisticPolygonMetaData *__first_;
    } __end_cap_;
};

struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder>> {
    struct AnimationObjectHolder *_field1;
    struct AnimationObjectHolder *_field2;
    struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder>> {
        struct AnimationObjectHolder *_field1;
    } _field3;
};

struct vector<altitude::Position2d, std::__1::allocator<altitude::Position2d>> {
    struct Position2d *_field1;
    struct Position2d *_field2;
    struct __compressed_pair<altitude::Position2d *, std::__1::allocator<altitude::Position2d>> {
        struct Position2d *_field1;
    } _field3;
};

struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey>> {
    struct SimpleTileKey *_field1;
    struct SimpleTileKey *_field2;
    struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey>> {
        struct SimpleTileKey *_field1;
    } _field3;
};

struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound>> {
    struct TileBound *_field1;
    struct TileBound *_field2;
    struct __compressed_pair<altitude::TileBound *, std::__1::allocator<altitude::TileBound>> {
        struct TileBound *_field1;
    } _field3;
};

struct vector<bool, std::__1::allocator<bool>> {
    unsigned long long *_field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long>> {
        unsigned long long _field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
};

struct vector<geo::fast_shared_ptr<vk::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection>>> {
    fast_shared_ptr_502c59d0 *__begin_;
    fast_shared_ptr_502c59d0 *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<vk::RouteLineSection>*, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection>>> {
        fast_shared_ptr_502c59d0 *__first_;
    } __end_cap_;
};

struct vector<geo::fast_shared_ptr<vk::TextDataStringInfo>, std::__1::allocator<geo::fast_shared_ptr<vk::TextDataStringInfo>>> {
    struct fast_shared_ptr<vk::TextDataStringInfo> *_field1;
    struct fast_shared_ptr<vk::TextDataStringInfo> *_field2;
    struct __compressed_pair<geo::fast_shared_ptr<vk::TextDataStringInfo>*, std::__1::allocator<geo::fast_shared_ptr<vk::TextDataStringInfo>>> {
        struct fast_shared_ptr<vk::TextDataStringInfo> *_field1;
    } _field3;
};

struct vector<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>, std::__1::allocator<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>>> {
    struct fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> *_field1;
    struct fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> *_field2;
    struct __compressed_pair<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>*, std::__1::allocator<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>>> {
        struct fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> *_field1;
    } _field3;
};

struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> {
    struct BufferLoadItem *_field1;
    struct BufferLoadItem *_field2;
    struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem>> {
        struct BufferLoadItem *_field1;
    } _field3;
};

struct vector<ggl::Building::BuildingMesh *, std::__1::allocator<ggl::Building::BuildingMesh *>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::Building::BuildingMesh **, std::__1::allocator<ggl::Building::BuildingMesh *>> {
        struct BuildingMesh **_field1;
    } _field3;
};

struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::BuildingPointyRoof::BuildingMesh **, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> {
        struct BuildingMesh **_field1;
    } _field3;
};

struct vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *>> {
    struct CommandBuffer **_field1;
    struct CommandBuffer **_field2;
    struct __compressed_pair<ggl::CommandBuffer **, std::__1::allocator<ggl::CommandBuffer *>> {
        struct CommandBuffer **_field1;
    } _field3;
};

struct vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement>> {
    struct ConstantDataElement *__begin_;
    struct ConstantDataElement *__end_;
    struct __compressed_pair<ggl::ConstantDataElement *, std::__1::allocator<ggl::ConstantDataElement>> {
        struct ConstantDataElement *__first_;
    } __end_cap_;
};

struct vector<ggl::FragmentBuffer *, std::__1::allocator<ggl::FragmentBuffer *>> {
    struct FragmentBuffer **_field1;
    struct FragmentBuffer **_field2;
    struct __compressed_pair<ggl::FragmentBuffer **, std::__1::allocator<ggl::FragmentBuffer *>> {
        struct FragmentBuffer **_field1;
    } _field3;
};

struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> {
    struct MeshMesh **_field1;
    struct MeshMesh **_field2;
    struct __compressed_pair<ggl::Glow::MeshMesh **, std::__1::allocator<ggl::Glow::MeshMesh *>> {
        struct MeshMesh **_field1;
    } _field3;
};

struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> {
    struct MultiRange *__begin_;
    struct MultiRange *__end_;
    struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange>> {
        struct MultiRange *__first_;
    } __end_cap_;
};

struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PolygonBase::CompressedMeshMesh, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
    struct CompressedMeshMesh *__begin_;
    struct CompressedMeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonBase::CompressedMeshMesh *, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
        struct CompressedMeshMesh *__first_;
    } __end_cap_;
};

struct vector<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> {
    struct MeshMesh **_field1;
    struct MeshMesh **_field2;
    struct __compressed_pair<ggl::PolygonMesh::MeshMesh **, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> {
        struct MeshMesh **_field1;
    } _field3;
};

struct vector<ggl::PolygonMesh::MeshMesh, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
};

struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> {
    struct PrefilteredLineMesh **_field1;
    struct PrefilteredLineMesh **_field2;
    struct __compressed_pair<ggl::PrefilteredLine::PrefilteredLineMesh **, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> {
        struct PrefilteredLineMesh **_field1;
    } _field3;
};

struct vector<ggl::Range, std::__1::allocator<ggl::Range>> {
    struct Range *__begin_;
    struct Range *__end_;
    struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range>> {
        struct Range *__first_;
    } __end_cap_;
};

struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *>> {
    struct RenderItem **_field1;
    struct RenderItem **_field2;
    struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *>> {
        struct RenderItem **_field1;
    } _field3;
};

struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher>> {
    struct RenderItemBatcher *__begin_;
    struct RenderItemBatcher *__end_;
    struct __compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher>> {
        struct RenderItemBatcher *__first_;
    } __end_cap_;
};

struct vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass>> {
    struct Pass *_field1;
    struct Pass *_field2;
    struct __compressed_pair<ggl::RenderQueue::Pass *, std::__1::allocator<ggl::RenderQueue::Pass>> {
        struct Pass *_field1;
    } _field3;
};

struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> {
    struct RibbonBatch<ggl::RoadRibbonDescriptor> **_field1;
    struct RibbonBatch<ggl::RoadRibbonDescriptor> **_field2;
    struct __compressed_pair<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>**, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> {
        struct RibbonBatch<ggl::RoadRibbonDescriptor> **_field1;
    } _field3;
};

struct vector<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> {
    struct RibbonBatch<ggl::TransitRibbonDescriptor> **_field1;
    struct RibbonBatch<ggl::TransitRibbonDescriptor> **_field2;
    struct __compressed_pair<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>**, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> {
        struct RibbonBatch<ggl::TransitRibbonDescriptor> **_field1;
    } _field3;
};

struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem>> {
    struct ShaderLoadItem *_field1;
    struct ShaderLoadItem *_field2;
    struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem>> {
        struct ShaderLoadItem *_field1;
    } _field3;
};

struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> {
    struct Texture2DLoadItem *_field1;
    struct Texture2DLoadItem *_field2;
    struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem>> {
        struct Texture2DLoadItem *_field1;
    } _field3;
};

struct vector<ggl::TextureBase *, std::__1::allocator<ggl::TextureBase *>> {
    struct TextureBase **__begin_;
    struct TextureBase **__end_;
    struct __compressed_pair<ggl::TextureBase **, std::__1::allocator<ggl::TextureBase *>> {
        struct TextureBase **__first_;
    } __end_cap_;
};

struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::TransitLineRibbon::BaseMesh **, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__first_;
    } __end_cap_;
};

struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *_field1;
    } _field3;
};

struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair>> {
    struct FeatureAttributePair *__begin_;
    struct FeatureAttributePair *__end_;
    struct __compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair>> {
        struct FeatureAttributePair *__first_;
    } __end_cap_;
};

struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> {
    unsigned char *__begin_;
    unsigned char *__end_;
    struct __compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId>> {
        unsigned char *__first_;
    } __end_cap_;
};

struct vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
    struct pair<TransitLineWithLink, float> *_field1;
    struct pair<TransitLineWithLink, float> *_field2;
    struct __compressed_pair<std::__1::pair<TransitLineWithLink, float>*, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
        struct pair<TransitLineWithLink, float> *_field1;
    } _field3;
};

struct vector<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>>>> {
    struct pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>> *__begin_;
    struct pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>> *__end_;
    struct __compressed_pair<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>>*, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>>>> {
        struct pair<std::__1::basic_string<char>, std::__1::shared_ptr<gss::StyleSheet>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__begin_;
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__end_;
    struct __compressed_pair<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>*, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
        struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
    struct pair<unsigned short, unsigned int> *__begin_;
    struct pair<unsigned short, unsigned int> *__end_;
    struct __compressed_pair<std::__1::pair<unsigned short, unsigned int>*, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
        struct pair<unsigned short, unsigned int> *__first_;
    } __end_cap_;
};

struct vector<std::__1::pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>>, std::__1::allocator<std::__1::pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>>>> {
    struct pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>> *_field1;
    struct pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>> *_field2;
    struct __compressed_pair<std::__1::pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>>*, std::__1::allocator<std::__1::pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>>>> {
        struct pair<vk::LabelExternalPointFeature::ElementType, gm::FixedPointVector<uint8_t, 4>> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> {
    struct shared_ptr<ggl::DebugRenderer> *_field1;
    struct shared_ptr<ggl::DebugRenderer> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer>*, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> {
        struct shared_ptr<ggl::DebugRenderer> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> {
    struct shared_ptr<ggl::VertexData> *_field1;
    struct shared_ptr<ggl::VertexData> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData>*, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> {
        struct shared_ptr<ggl::VertexData> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<gss::BuildingDrawStyle>, std::__1::allocator<std::__1::shared_ptr<gss::BuildingDrawStyle>>> {
    struct shared_ptr<gss::BuildingDrawStyle> *__begin_;
    struct shared_ptr<gss::BuildingDrawStyle> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::BuildingDrawStyle>*, std::__1::allocator<std::__1::shared_ptr<gss::BuildingDrawStyle>>> {
        struct shared_ptr<gss::BuildingDrawStyle> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<gss::StyleQuery>, std::__1::allocator<std::__1::shared_ptr<gss::StyleQuery>>> {
    shared_ptr_b80d91ee *__begin_;
    shared_ptr_b80d91ee *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::StyleQuery>*, std::__1::allocator<std::__1::shared_ptr<gss::StyleQuery>>> {
        shared_ptr_b80d91ee *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable>>> {
    shared_ptr_54d3d1ec *__begin_;
    shared_ptr_54d3d1ec *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable>*, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable>>> {
        shared_ptr_54d3d1ec *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::LabelAnnotationElementGroup>, std::__1::allocator<std::__1::shared_ptr<vk::LabelAnnotationElementGroup>>> {
    struct shared_ptr<vk::LabelAnnotationElementGroup> *_field1;
    struct shared_ptr<vk::LabelAnnotationElementGroup> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelAnnotationElementGroup>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelAnnotationElementGroup>>> {
        struct shared_ptr<vk::LabelAnnotationElementGroup> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<vk::LabelExternalDataElementGroup>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalDataElementGroup>>> {
    struct shared_ptr<vk::LabelExternalDataElementGroup> *_field1;
    struct shared_ptr<vk::LabelExternalDataElementGroup> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelExternalDataElementGroup>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalDataElementGroup>>> {
        struct shared_ptr<vk::LabelExternalDataElementGroup> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<vk::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature>>> {
    struct shared_ptr<vk::LabelExternalPointFeature> *_field1;
    struct shared_ptr<vk::LabelExternalPointFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelExternalPointFeature>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature>>> {
        struct shared_ptr<vk::LabelExternalPointFeature> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature>>> {
    struct shared_ptr<vk::LabelExternalRoadFeature> *_field1;
    struct shared_ptr<vk::LabelExternalRoadFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelExternalRoadFeature>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature>>> {
        struct shared_ptr<vk::LabelExternalRoadFeature> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature>>> {
    shared_ptr_ec4684b3 *_field1;
    shared_ptr_ec4684b3 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelFeature>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature>>> {
        shared_ptr_ec4684b3 *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile>>> {
    shared_ptr_89f9185e *__begin_;
    shared_ptr_89f9185e *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile>>> {
        shared_ptr_89f9185e *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::LabelStyle>, std::__1::allocator<std::__1::shared_ptr<vk::LabelStyle>>> {
    struct shared_ptr<vk::LabelStyle> *_field1;
    struct shared_ptr<vk::LabelStyle> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelStyle>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelStyle>>> {
        struct shared_ptr<vk::LabelStyle> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
    shared_ptr_338aa11d *__begin_;
    shared_ptr_338aa11d *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel>*, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
        shared_ptr_338aa11d *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::TextDataFontVariant>, std::__1::allocator<std::__1::shared_ptr<vk::TextDataFontVariant>>> {
    struct shared_ptr<vk::TextDataFontVariant> *_field1;
    struct shared_ptr<vk::TextDataFontVariant> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<vk::TextDataFontVariant>*, std::__1::allocator<std::__1::shared_ptr<vk::TextDataFontVariant>>> {
        struct shared_ptr<vk::TextDataFontVariant> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<vk::TransitConnectedNode>, std::__1::allocator<std::__1::shared_ptr<vk::TransitConnectedNode>>> {
    struct shared_ptr<vk::TransitConnectedNode> *__begin_;
    struct shared_ptr<vk::TransitConnectedNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::TransitConnectedNode>*, std::__1::allocator<std::__1::shared_ptr<vk::TransitConnectedNode>>> {
        struct shared_ptr<vk::TransitConnectedNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::TransitNode>, std::__1::allocator<std::__1::shared_ptr<vk::TransitNode>>> {
    struct shared_ptr<vk::TransitNode> *__begin_;
    struct shared_ptr<vk::TransitNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::TransitNode>*, std::__1::allocator<std::__1::shared_ptr<vk::TransitNode>>> {
        struct shared_ptr<vk::TransitNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::TransitOrphanNode>, std::__1::allocator<std::__1::shared_ptr<vk::TransitOrphanNode>>> {
    struct shared_ptr<vk::TransitOrphanNode> *__begin_;
    struct shared_ptr<vk::TransitOrphanNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::TransitOrphanNode>*, std::__1::allocator<std::__1::shared_ptr<vk::TransitOrphanNode>>> {
        struct shared_ptr<vk::TransitOrphanNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::TransitParentNode>, std::__1::allocator<std::__1::shared_ptr<vk::TransitParentNode>>> {
    struct shared_ptr<vk::TransitParentNode> *__begin_;
    struct shared_ptr<vk::TransitParentNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::TransitParentNode>*, std::__1::allocator<std::__1::shared_ptr<vk::TransitParentNode>>> {
        struct shared_ptr<vk::TransitParentNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>>> {
    struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>> *__begin_;
    struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>> *__end_;
    struct __compressed_pair<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>*, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>>> {
        struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>;

struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> {
    struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__begin_;
    struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__end_;
    struct __compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> {
        struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__first_;
    } __end_cap_;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *_field1;
    } _field3;
};

struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *__first_;
    } __end_cap_;
};

struct vector<vk::LabelExternalIconElement, std::__1::allocator<vk::LabelExternalIconElement>> {
    struct LabelExternalIconElement *_field1;
    struct LabelExternalIconElement *_field2;
    struct __compressed_pair<vk::LabelExternalIconElement *, std::__1::allocator<vk::LabelExternalIconElement>> {
        struct LabelExternalIconElement *_field1;
    } _field3;
};

struct vector<vk::LabelExternalTextElement, std::__1::allocator<vk::LabelExternalTextElement>> {
    struct LabelExternalTextElement *_field1;
    struct LabelExternalTextElement *_field2;
    struct __compressed_pair<vk::LabelExternalTextElement *, std::__1::allocator<vk::LabelExternalTextElement>> {
        struct LabelExternalTextElement *_field1;
    } _field3;
};

struct vector<vk::LabelFeaturePlacementInfo, std::__1::allocator<vk::LabelFeaturePlacementInfo>> {
    struct LabelFeaturePlacementInfo *_field1;
    struct LabelFeaturePlacementInfo *_field2;
    struct __compressed_pair<vk::LabelFeaturePlacementInfo *, std::__1::allocator<vk::LabelFeaturePlacementInfo>> {
        struct LabelFeaturePlacementInfo *_field1;
    } _field3;
};

struct vector<vk::LabelShieldEntry, std::__1::allocator<vk::LabelShieldEntry>> {
    struct LabelShieldEntry *_field1;
    struct LabelShieldEntry *_field2;
    struct __compressed_pair<vk::LabelShieldEntry *, std::__1::allocator<vk::LabelShieldEntry>> {
        struct LabelShieldEntry *_field1;
    } _field3;
};

struct vector<vk::PatternedBatch *, std::__1::allocator<vk::PatternedBatch *>> {
    struct PatternedBatch **_field1;
    struct PatternedBatch **_field2;
    struct __compressed_pair<vk::PatternedBatch **, std::__1::allocator<vk::PatternedBatch *>> {
        struct PatternedBatch **_field1;
    } _field3;
};

struct vector<vk::PilledTrafficBatch *, std::__1::allocator<vk::PilledTrafficBatch *>> {
    struct PilledTrafficBatch **_field1;
    struct PilledTrafficBatch **_field2;
    struct __compressed_pair<vk::PilledTrafficBatch **, std::__1::allocator<vk::PilledTrafficBatch *>> {
        struct PilledTrafficBatch **_field1;
    } _field3;
};

struct vector<vk::RoadBatch *, std::__1::allocator<vk::RoadBatch *>> {
    struct RoadBatch **_field1;
    struct RoadBatch **_field2;
    struct __compressed_pair<vk::RoadBatch **, std::__1::allocator<vk::RoadBatch *>> {
        struct RoadBatch **_field1;
    } _field3;
};

struct vector<vk::SolidTrafficBatch *, std::__1::allocator<vk::SolidTrafficBatch *>> {
    struct SolidTrafficBatch **_field1;
    struct SolidTrafficBatch **_field2;
    struct __compressed_pair<vk::SolidTrafficBatch **, std::__1::allocator<vk::SolidTrafficBatch *>> {
        struct SolidTrafficBatch **_field1;
    } _field3;
};

struct vector<vk::StringWithLocale, std::__1::allocator<vk::StringWithLocale>> {
    struct StringWithLocale *_field1;
    struct StringWithLocale *_field2;
    struct __compressed_pair<vk::StringWithLocale *, std::__1::allocator<vk::StringWithLocale>> {
        struct StringWithLocale *_field1;
    } _field3;
};

struct vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea>> {
        struct TileExclusionArea *__first_;
    } __end_cap_;
};

struct vector<vk::TransitLine, std::__1::allocator<vk::TransitLine>> {
    struct TransitLine *__begin_;
    struct TransitLine *__end_;
    struct __compressed_pair<vk::TransitLine *, std::__1::allocator<vk::TransitLine>> {
        struct TransitLine *__first_;
    } __end_cap_;
};

struct vector<vk::TransitLink, std::__1::allocator<vk::TransitLink>> {
    struct TransitLink *__begin_;
    struct TransitLink *__end_;
    struct __compressed_pair<vk::TransitLink *, std::__1::allocator<vk::TransitLink>> {
        struct TransitLink *__first_;
    } __end_cap_;
};

struct vector<vk::TransitLinksLabelFeature::LabelStyleInfo, std::__1::allocator<vk::TransitLinksLabelFeature::LabelStyleInfo>> {
    struct LabelStyleInfo *_field1;
    struct LabelStyleInfo *_field2;
    struct __compressed_pair<vk::TransitLinksLabelFeature::LabelStyleInfo *, std::__1::allocator<vk::TransitLinksLabelFeature::LabelStyleInfo>> {
        struct LabelStyleInfo *_field1;
    } _field3;
};

struct vector<vk::TransitLinksLabelFeature::LabelTransitLine, std::__1::allocator<vk::TransitLinksLabelFeature::LabelTransitLine>> {
    struct LabelTransitLine *_field1;
    struct LabelTransitLine *_field2;
    struct __compressed_pair<vk::TransitLinksLabelFeature::LabelTransitLine *, std::__1::allocator<vk::TransitLinksLabelFeature::LabelTransitLine>> {
        struct LabelTransitLine *_field1;
    } _field3;
};

struct vector<vk::TransitLinksLabelFeature::WorkUnit, std::__1::allocator<vk::TransitLinksLabelFeature::WorkUnit>> {
    struct WorkUnit *_field1;
    struct WorkUnit *_field2;
    struct __compressed_pair<vk::TransitLinksLabelFeature::WorkUnit *, std::__1::allocator<vk::TransitLinksLabelFeature::WorkUnit>> {
        struct WorkUnit *_field1;
    } _field3;
};

struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
    struct Record *__begin_;
    struct Record *__end_;
    struct __compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
        struct Record *__first_;
    } __end_cap_;
};

struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#if 0
// Names with conflicting types:
typedef struct {
    double _course;
    double _referenceScreenOffset;
    double _pitch;
    double _boomLength;
} State_3e0671f0;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct VKPoint _field2;
    struct {
        double _field1;
        double _field2;
    } _field3;
    id _field4;
} Anchor_facb9ede;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_06328420 _field2;
} RenderQueue_da5f8b9c;

typedef struct {
    struct vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass>> _field1;
    struct vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *>> _field2;
    struct shared_ptr<ggl::RenderTransaction> _field3;
} RenderQueue_e4212455;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    char *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned int _field7;
    unsigned long long _field8;
    _Bool _field9;
    unsigned long long _field10;
    float _field11;
    unsigned long long _field12;
    id _field13;
    int _field14;
} CDStruct_58d0ca89;

typedef struct {
    _Bool borders;
    _Bool folds;
    _Bool angles;
    float minAngle;
    float maxAngle;
} CDStruct_7a997382;

typedef struct {
    _Bool orthographic;
    double width;
    double height;
    double near;
    double far;
} CDStruct_184b3e93;

typedef struct {
    _Bool _field1;
} CDStruct_b31ca263;

typedef struct {
    unsigned char timePeriod;
    unsigned char overlayType;
    unsigned char applicationState;
} CDStruct_f0cfbbbb;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
} CDStruct_32a7f38a;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
} CDStruct_6adf2384;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    double v[4][4];
} CDStruct_aa5aacbc;

typedef struct {
    float *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_fae3dc92;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
} CDStruct_a12fb154;

typedef struct {
    double latitude;
    double longitude;
    double altitude;
} CDStruct_071ac149;

typedef struct {
    float _a;
    unsigned int _b;
    unsigned int _g;
    unsigned int _r;
} CDStruct_58ec0031;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct CDStruct_183601bc;

typedef struct {
    id _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct _NSRange _field4;
    CDStruct_183601bc *_field5;
    CDStruct_183601bc *_field6;
    unsigned long long _field7;
    unsigned long long _field8;
    struct _NSRange _field9;
    struct _NSRange _field10;
    _Bool _field11;
    struct _NSRange _field12;
    struct _NSRange _field13;
    struct _NSRange _field14[2];
    struct _NSRange _field15[2];
} CDStruct_cb3d236a;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    CDStruct_183601bc *_field3;
} CDStruct_3b01f0aa;

typedef struct {
    unsigned int _field1;
    float _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_e9f6a06b;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    float _field4;
    unsigned int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_033e8ed6;

typedef struct {
    CDStruct_183601bc *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    CDStruct_183601bc *_field6;
    CDStruct_183601bc *_field7;
} CDStruct_91f75a7f;

typedef struct {
    int from;
    int to;
    CDStruct_f0cfbbbb fromDisplayStyle;
    CDStruct_f0cfbbbb toDisplayStyle;
    float fraction;
} CDStruct_e123902a;

typedef struct {
    CDStruct_58d0ca89 _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned int _field6;
    float _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
} CDStruct_5be08681;

typedef struct {
    CDStruct_58d0ca89 _field1;
    char *_field2;
    unsigned long long _field3;
} CDStruct_2da3f85a;

typedef struct {
    CDStruct_58d0ca89 _field1;
    CDStruct_b2fbf00d _field2;
    CDStruct_b2fbf00d _field3;
    CDStruct_183601bc *_field4;
    float _field5;
    unsigned int _field6;
    unsigned char _field7;
    _Bool _field8;
    _Bool _field9;
} CDStruct_d374d81c;

typedef struct {
    CDStruct_58ec0031 _color;
    float _offsetX;
    float _offsetY;
    float _size;
    struct {
        unsigned int offsetX:1;
        unsigned int offsetY:1;
    } _has;
} CDStruct_79d0722e;

typedef struct {
    CDStruct_58ec0031 _color;
    float _width;
} CDStruct_f43f0670;

typedef struct {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} CDStruct_5ae1f918;

typedef struct {
    Matrix_5173352a transitLineColor;
} CDStruct_87ab733e;

typedef struct {
    struct VKPoint position;
    double course;
    _Bool onRoute;
} CDStruct_b926a728;

typedef struct {
    struct VKPoint position;
    Matrix_6e1d3589 tangent;
    _Bool tangentValid;
} CDStruct_86193286;

typedef struct {
    struct {
        unsigned int _field1;
        unsigned int _field2;
        unsigned int _field3;
        unsigned int _field4;
    } _field1;
    struct {
        unsigned int _field1;
        int _field2;
        float _field3;
        _Bool _field4;
        _Bool _field5;
        _Bool _field6;
        _Bool _field7;
        _Bool _field8;
        struct {
            unsigned char _field1;
            unsigned short _field2;
        } _field9[16];
    } _field2;
} CDStruct_db2bd8f2;

typedef struct {
    CDStruct_d374d81c _field1;
    unsigned long long _field2;
    unsigned char _field3;
    float _field4;
    unsigned short _field5;
    float _field6;
} CDStruct_8b158606;

typedef struct {
    CDStruct_58d0ca89 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    int _field4;
    int _field5;
    int _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    union {
        struct {
            CDStruct_b2fbf00d _field1;
            CDStruct_b2fbf00d _field2;
        } _field1;
        CDStruct_818bb265 _field2;
    } _field9;
    CDStruct_183601bc *_field10;
    struct {
        unsigned short _field1[2];
        unsigned short _field2[2];
    } _field11;
    unsigned char _field12;
    struct _NSRange _field13;
    _Bool _field14;
} CDStruct_d7f4d903;

typedef struct {
    CDStruct_d7f4d903 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    _Bool _field4;
    _Bool _field5;
} CDStruct_957c25a5;

typedef struct {
    CDStruct_d7f4d903 _field1;
    CDStruct_b2fbf00d _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    CDStruct_b2fbf00d _field8;
} CDStruct_8ede0f48;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double x0;
    double x1;
    double y0;
    double y1;
} CDStruct_aca18c62;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    double x;
    double y;
} CDStruct_34734122;

typedef struct {
    struct {
        double _field1;
        double _field2;
    } _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
} CDStruct_90e2a262;

typedef struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
} Box_3d7e3c2c;

typedef struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} Box_3fb92e00;

typedef struct Box<float, 3> {
    Matrix_811b2232 _minimum;
    Matrix_811b2232 _maximum;
} Box_7ca49197;

typedef struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {
    int _field1;
    int _field2;
    int _field3;
    struct shared_ptr<ggl::Buffer> _field4;
    struct Range _field5;
    unsigned long long _field6;
    struct Range _field7;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field8;
    struct ConstantCReflection *_field9;
} ConstantDataTyped_b1bd3bad;

typedef struct FixedPointVector<unsigned char, 4> {
    unsigned char _e[4];
} FixedPointVector_f041f768;

typedef struct Matrix<double, 2, 1> {
    double _e[2];
} Matrix_2bdd42a3;

typedef struct Matrix<double, 3, 1> {
    double _e[3];
} Matrix_6e1d3589;

typedef struct Matrix<double, 4, 1> {
    double _field1[4];
} Matrix_ec0d872f;

typedef struct Matrix<double, 4, 4> {
    double _e[16];
} Matrix_08d701e4;

typedef struct Matrix<float, 2, 1> {
    float _e[2];
} Matrix_8746f91e;

typedef struct Matrix<float, 3, 1> {
    float _e[3];
} Matrix_811b2232;

typedef struct Matrix<float, 4, 1> {
    float _e[4];
} Matrix_5173352a;

typedef struct Matrix<float, 4, 4> {
    float _e[16];
} Matrix_99e705ad;

typedef struct Matrix<int, 2, 1> {
    int _field1[2];
} Matrix_12bc3712;

typedef struct MeshVendor<ggl::Building::BuildingMesh> {
    struct vector<ggl::Building::BuildingMesh *, std::__1::allocator<ggl::Building::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_3faa0a72;

typedef struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_c6d8e5cd;

typedef struct MeshVendor<ggl::Glow::MeshMesh> {
    struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
} MeshVendor_43d71dca;

typedef struct MeshVendor<ggl::PolygonMesh::MeshMesh> {
    struct vector<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
} MeshVendor_82aa5b9e;

typedef struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> _field1;
    struct PrefilteredLineMesh *_field2;
} MeshVendor_8027e961;

typedef struct RibbonLayer<ggl::RoadRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[4];
} RibbonLayer_0b5240d1;

typedef struct RibbonLayer<ggl::TransitRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> _field2;
    struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
} RibbonLayer_d95b4043;

typedef struct StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>> {
    shared_ptr_f06afc6c _field1;
    struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> _field2;
    _Bool _field3;
    unsigned char _field4;
} StyleResolutionSession_e599f5f4;

typedef struct StyleResolutionSession<std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>> {
    shared_ptr_f06afc6c _field1;
    struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::vector<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<PolygonKey, geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>>>> _field2;
    _Bool _field3;
    unsigned char _field4;
} StyleResolutionSession_404d82cf;

typedef struct TrafficLayer<ggl::PilledTrafficRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::PilledTrafficBatch *, std::__1::allocator<vk::PilledTrafficBatch *>> _field2;
    struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> _field3;
    struct RenderState *_field4[1];
    shared_ptr_696716c4 _field5;
    struct shared_ptr<ggl::RenderState> _field6[1];
    unsigned long long _field7;
    struct TrafficManager<ggl::PilledTrafficRibbonDescriptor> *_field8;
    id _field9;
} TrafficLayer_4953bdcb;

typedef struct TrafficLayer<ggl::SolidTrafficRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::SolidTrafficBatch *, std::__1::allocator<vk::SolidTrafficBatch *>> _field2;
    struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
    shared_ptr_696716c4 _field5;
    struct shared_ptr<ggl::RenderState> _field6[2];
    unsigned long long _field7;
    struct TrafficManager<ggl::SolidTrafficRibbonDescriptor> *_field8;
    id _field9;
} TrafficLayer_232260f3;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
} basic_string_a1f69cfb;

typedef struct fast_shared_ptr<vk::RouteLineSection> {
    struct _fast_shared_ptr_control *_control;
} fast_shared_ptr_502c59d0;

typedef struct function<void (const vk::RoadPiece &)> {
    struct type _field1;
    struct __base<void (const vk::RoadPiece &)> *_field2;
} function_21f69ee7;

typedef struct list<vk::TransitDisplayConnection, std::__1::allocator<vk::TransitDisplayConnection>> {
    struct __list_node_base<vk::TransitDisplayConnection, void *> {
        struct __list_node<vk::TransitDisplayConnection, void *> *__prev_;
        struct __list_node<vk::TransitDisplayConnection, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<vk::TransitDisplayConnection, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
} list_59ba9859;

typedef struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
} map_604bf0d9;

typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_97fa0047;

typedef struct shared_ptr<ggl::BitmapData> {
    struct BitmapData *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_4ce39eb2;

typedef struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_edb96180;

typedef struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic>> {
    ConstantDataTyped_b1bd3bad *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9a8b17b5;

typedef struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>> {
    struct ConstantDataTyped<ggl::Tile::View> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_696716c4;

typedef struct shared_ptr<ggl::Debug::BaseMesh> {
    struct BaseMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a5e35864;

typedef struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_807ec9ac;

typedef struct shared_ptr<ggl::GLDevice> {
    struct GLDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_77723e34;

typedef struct shared_ptr<ggl::GLRenderer> {
    struct GLRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3f8cd81b;

typedef struct shared_ptr<ggl::PolygonBase::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_78ff922b;

typedef struct shared_ptr<ggl::RenderQueue> {
    struct RenderQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_06328420;

typedef struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_479d1306;

typedef struct shared_ptr<ggl::TextureMesh::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_7c9fbd8a;

typedef struct shared_ptr<gss::CartoStyle> {
    struct CartoStyle *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_750cb28c;

typedef struct shared_ptr<gss::GenericShieldDrawStyle> {
    struct GenericShieldDrawStyle *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_f0e6a37c;

typedef struct shared_ptr<gss::StyleManager> {
    struct StyleManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f06afc6c;

typedef struct shared_ptr<gss::StyleQuery> {
    struct StyleQuery *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_b80d91ee;

typedef struct shared_ptr<gss::StyleSheet> {
    struct StyleSheet *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_3fff3c66;

typedef struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_887a193f;

typedef struct shared_ptr<md::TexturedDrawable> {
    struct TexturedDrawable *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_54d3d1ec;

typedef struct shared_ptr<vk::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6f3fd3aa;

typedef struct shared_ptr<vk::AnchorContext> {
    struct AnchorContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_4d0abf3b;

typedef struct shared_ptr<vk::AnchorFactory> {
    struct AnchorFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_00dc923b;

typedef struct shared_ptr<vk::InfoLabel> {
    struct InfoLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0c41964b;

typedef struct shared_ptr<vk::LabelFeature> {
    struct LabelFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ec4684b3;

typedef struct shared_ptr<vk::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_292eff10;

typedef struct shared_ptr<vk::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dd1f7020;

typedef struct shared_ptr<vk::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_89f9185e;

typedef struct shared_ptr<vk::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9eab1d88;

typedef struct shared_ptr<vk::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_338aa11d;

typedef struct shared_ptr<vk::TransitInterTileMediator> {
    struct TransitInterTileMediator *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6f1ea1a2;

typedef struct shared_ptr<vk::ViewTransform> {
    struct ViewTransform *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_d1ecf7a2;

typedef struct unordered_map<std::__1::basic_string<char>, int, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, int>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_map_cd1c460d;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_map_aa048f4b;

typedef struct unordered_map<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned int, int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_4f9963f1;

typedef struct unordered_map<unsigned long long, vk::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, vk::PolygonRouteAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, vk::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_map_717402f9;

typedef struct unordered_map<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>, std::__1::hash<vk::PatternedBatchKey>, std::__1::equal_to<vk::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_880b4a54;

typedef struct unordered_map<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>, std::__1::hash<vk::RoadBatchKey>, std::__1::equal_to<vk::RoadBatchKey>, std::__1::allocator<std::__1::pair<const vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_f54c85ed;

typedef struct unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
    struct __hash_table<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
        struct unique_ptr<std::__1::__hash_node<TransitLineWithLink, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> {
                struct __hash_node<TransitLineWithLink, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, TransitLineWithLinkHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<TransitLineWithLink>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_set_e09f79ea;

typedef struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node<unsigned long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> {
                struct __hash_node<unsigned long long, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_set_6cd805f9;

typedef struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_25c79282;

typedef struct vector<RouteJunctionInfo, std::__1::allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, std::__1::allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
} vector_682a2c99;

typedef struct vector<VKRect, std::__1::allocator<VKRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKRect *, std::__1::allocator<VKRect>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
} vector_6c1b99c0;

typedef struct vector<geo::fast_shared_ptr<vk::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection>>> {
    fast_shared_ptr_502c59d0 *__begin_;
    fast_shared_ptr_502c59d0 *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<vk::RouteLineSection>*, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection>>> {
        fast_shared_ptr_502c59d0 *__first_;
    } __end_cap_;
} vector_eb11dace;

typedef struct vector<ggl::PolygonBase::CompressedMeshMesh, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
    struct CompressedMeshMesh *__begin_;
    struct CompressedMeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonBase::CompressedMeshMesh *, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
        struct CompressedMeshMesh *__first_;
    } __end_cap_;
} vector_3f17ee4c;

typedef struct vector<ggl::PolygonMesh::MeshMesh, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
} vector_0edf1665;

typedef struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem>> {
    struct ShaderLoadItem *_field1;
    struct ShaderLoadItem *_field2;
    struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem>> {
        struct ShaderLoadItem *_field1;
    } _field3;
} vector_b35310ee;

typedef struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__first_;
    } __end_cap_;
} vector_e20517dc;

typedef struct vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
    struct pair<TransitLineWithLink, float> *_field1;
    struct pair<TransitLineWithLink, float> *_field2;
    struct __compressed_pair<std::__1::pair<TransitLineWithLink, float>*, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
        struct pair<TransitLineWithLink, float> *_field1;
    } _field3;
} vector_1e3b8d07;

typedef struct vector<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__begin_;
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__end_;
    struct __compressed_pair<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>*, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
        struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__first_;
    } __end_cap_;
} vector_7afb2ddd;

typedef struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__first_;
    } __end_cap_;
} vector_dc840c5c;

typedef struct vector<std::__1::shared_ptr<gss::BuildingDrawStyle>, std::__1::allocator<std::__1::shared_ptr<gss::BuildingDrawStyle>>> {
    struct shared_ptr<gss::BuildingDrawStyle> *__begin_;
    struct shared_ptr<gss::BuildingDrawStyle> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::BuildingDrawStyle>*, std::__1::allocator<std::__1::shared_ptr<gss::BuildingDrawStyle>>> {
        struct shared_ptr<gss::BuildingDrawStyle> *__first_;
    } __end_cap_;
} vector_ac81ee32;

typedef struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable>>> {
    shared_ptr_54d3d1ec *__begin_;
    shared_ptr_54d3d1ec *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable>*, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable>>> {
        shared_ptr_54d3d1ec *__first_;
    } __end_cap_;
} vector_8810021a;

typedef struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
    shared_ptr_338aa11d *__begin_;
    shared_ptr_338aa11d *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel>*, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
        shared_ptr_338aa11d *__first_;
    } __end_cap_;
} vector_4ea116aa;

typedef struct vector<std::__1::shared_ptr<vk::TransitNode>, std::__1::allocator<std::__1::shared_ptr<vk::TransitNode>>> {
    struct shared_ptr<vk::TransitNode> *__begin_;
    struct shared_ptr<vk::TransitNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::TransitNode>*, std::__1::allocator<std::__1::shared_ptr<vk::TransitNode>>> {
        struct shared_ptr<vk::TransitNode> *__first_;
    } __end_cap_;
} vector_9021ffe9;

typedef struct vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea>> {
        struct TileExclusionArea *__first_;
    } __end_cap_;
} vector_a2f7343e;

typedef struct vector<vk::TransitLink, std::__1::allocator<vk::TransitLink>> {
    struct TransitLink *__begin_;
    struct TransitLink *__end_;
    struct __compressed_pair<vk::TransitLink *, std::__1::allocator<vk::TransitLink>> {
        struct TransitLink *__first_;
    } __end_cap_;
} vector_ea869f43;

typedef struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_96fca551;

