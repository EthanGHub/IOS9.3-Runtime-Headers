//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <VectorKit/VKScreenCanvas.h>

#import <VectorKit/GEOResourceManifestTileGroupObserver-Protocol.h>
#import <VectorKit/LabelManagerDelegate-Protocol.h>
#import <VectorKit/VKCameraControllerDelegate-Protocol.h>
#import <VectorKit/VKGlobeLineContainerDelegate-Protocol.h>
#import <VectorKit/VKInteractiveMap-Protocol.h>

@class GEOMapRegion, GEOResourceManifestConfiguration, NSArray, NSMutableArray, NSSet, NSString, VKAnchorContext, VKAnchorWrapper, VKAnnotationModel, VKGlobeCameraController, VKGlobeLineContainer, VKGlobePointCache, VKViewTransform;
@protocol VKInteractiveMapDelegate, VKRouteMatchedAnnotationPresentation, VKTrackableAnnotation;

__attribute__((visibility("hidden")))
@interface VKClassicGlobeCanvas : VKScreenCanvas <VKCameraControllerDelegate, LabelManagerDelegate, GEOResourceManifestTileGroupObserver, VKGlobeLineContainerDelegate, VKInteractiveMap>
{
    struct Viewer *_viewer;
    id <VKInteractiveMapDelegate> _delegate;
    VKGlobeCameraController *_cameraController;
    VKAnnotationModel *_annotationModel;
    VKAnchorContext *_anchorContext;
    VKGlobePointCache *_pointCache;
    VKViewTransform *_viewTransform;
    long long _mapType;
    CDStruct_f0cfbbbb _mapDisplayStyle;
    VKGlobeLineContainer *_lineContainer;
    double _contentScale;
    _Bool _disableRoads;
    _Bool _disableLabels;
    struct shared_ptr<vk::VKGlobeStylesheet> _globeStyleSheet;
    struct AltitudeDebugSettings _debugSettings;
    struct GlobeAdapter *_globeAdapter;
    struct shared_ptr<md::GlobeOverlayContainer> _overlayContainer;
    _Bool _initialized;
    _Bool _canShowFlyover;
    struct shared_ptr<bool> _isDead;
    _Bool _isLoading;
    _Bool _isDownloading;
    _Bool _coarseLoading;
    _Bool _tourIsDownloading;
    double _currentZoomLevel;
    CDUnknownBlockType _sceneDidLoadCallback;
    CDUnknownBlockType _artworkIsReadyBlock;
    NSMutableArray *_externalAnchors;
    GEOResourceManifestConfiguration *_manifestConfiguration;
    _Bool _showsBuildings;
}

+ (_Bool)supportsMapType:(long long)arg1 scale:(int)arg2 manifestConfiguration:(id)arg3;
@property(nonatomic) _Bool disableLabels; // @synthesize disableLabels=_disableLabels;
@property(nonatomic) _Bool disableRoads; // @synthesize disableRoads=_disableRoads;
@property(nonatomic) _Bool showsBuildings; // @synthesize showsBuildings=_showsBuildings;
@property(copy, nonatomic) CDUnknownBlockType sceneDidLoadCallback; // @synthesize sceneDidLoadCallback=_sceneDidLoadCallback;
@property(readonly, nonatomic) _Bool flyoverAvailable; // @synthesize flyoverAvailable=_canShowFlyover;
@property(nonatomic) id <VKInteractiveMapDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)currentSceneRequiresMSAA;
@property(readonly, nonatomic) struct GlobeOverlayContainer *overlayContainer;
- (void)_setDefaultFov:(float)arg1;
- (void)disableTileAnalytics;
- (void)enableTileAnalytics;
- (id)flyoverStatistics;
- (void)resetFlyoverStatistics;
- (void)disableFlyoverStatistics;
- (void)enableFlyoverStatistics;
- (void)setupMapScene;
- (void)removeExternalAnchor:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
@property(readonly, nonatomic) VKAnchorWrapper *externalAnchors;
- (void)_reachabilityChanged:(id)arg1;
- (void)waitForLoading;
- (void)_updateDebugSettings;
- (void)setBackgroundViewLoading:(_Bool)arg1;
@property(readonly, nonatomic, getter=isFullyDrawn) _Bool fullyDrawn;
- (void)didReceiveMemoryWarning:(_Bool)arg1 beAggressive:(_Bool)arg2;
- (void)didEnterBackground;
- (void)clearSceneIsEffectivelyHidden:(_Bool)arg1;
@property(readonly, nonatomic) NSArray *rasterOverlays;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)removeRasterOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
@property(readonly, nonatomic) NSSet *persistentOverlays;
@property(readonly, nonatomic) NSArray *overlays;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 flyoverModeWillChange:(int)arg2;
- (void)cameraController:(id)arg1 flyoverModeDidChange:(int)arg2;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(_Bool)arg2;
- (void)cameraControllerDidFinishInitialTrackingAnimation:(id)arg1;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (struct VKPoint)pointForHandle:(id)arg1 atCoordinate:(CDStruct_c3b9c2ee)arg2 withHighPrecision:(_Bool)arg3;
- (void)removeHandle:(id)arg1;
- (id)addHandleAtCoordinate:(CDStruct_c3b9c2ee)arg1 withHighPrecision:(_Bool)arg2;
- (CDUnknownBlockType)annotationMarkerDeselectionCallback;
- (id)selectedAnnotationMarker;
- (id)annotationMarkers;
- (_Bool)shouldHideOffscreenSelectedAnnotation;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (void)setAnnotationMarkerDeselectionCallback:(CDUnknownBlockType)arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)removeAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(_Bool)arg2;
- (void)lineContainerNeedsDisplay:(id)arg1;
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}{vector<vk::LabelExternalIcon *, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<vk::LabelExternalIcon **, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCC}f{shared_ptr<gss::StyleManager>=^{StyleManager}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StyleQuery>=^{StyleQuery}^{__shared_weak_count}}}{LabelImageLoader={list<vk::LabelImageLoader::CachedItem, std::__1::allocator<vk::LabelImageLoader::CachedItem> >={__list_node_base<vk::LabelImageLoader::CachedItem, void *>=^{__list_node<vk::LabelImageLoader::CachedItem, void *>}^{__list_node<vk::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<vk::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *>, vk::LabelImageLoader::LabelImageCacheHash, vk::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}III}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<vk::LabelExternalObjectsModerator, std::__1::default_delete<vk::LabelExternalObjectsModerator> >={__compressed_pair<vk::LabelExternalObjectsModerator *, std::__1::default_delete<vk::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<vk::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}^{shared_ptr<vk::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >={__compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >=^^{__hash_node<unsigned long long, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node<unsigned long long, void *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}^{shared_ptr<vk::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{map<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>, vk::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<vk::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<vk::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, vk::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::weak_interface_ptr<vk::LabelManager> >=^{weak_interface_ptr<vk::LabelManager>}^{__shared_weak_count}}IddQBfCIIIdf{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:pendingArtworkIsReady:
-     // Error parsing type: v24@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}{vector<vk::LabelExternalIcon *, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<vk::LabelExternalIcon **, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCC}f{shared_ptr<gss::StyleManager>=^{StyleManager}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StyleQuery>=^{StyleQuery}^{__shared_weak_count}}}{LabelImageLoader={list<vk::LabelImageLoader::CachedItem, std::__1::allocator<vk::LabelImageLoader::CachedItem> >={__list_node_base<vk::LabelImageLoader::CachedItem, void *>=^{__list_node<vk::LabelImageLoader::CachedItem, void *>}^{__list_node<vk::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<vk::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *>, vk::LabelImageLoader::LabelImageCacheHash, vk::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}III}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<vk::LabelExternalObjectsModerator, std::__1::default_delete<vk::LabelExternalObjectsModerator> >={__compressed_pair<vk::LabelExternalObjectsModerator *, std::__1::default_delete<vk::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<vk::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}^{shared_ptr<vk::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >={__compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >=^^{__hash_node<unsigned long long, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node<unsigned long long, void *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}^{shared_ptr<vk::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{map<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>, vk::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<vk::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<vk::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, vk::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::weak_interface_ptr<vk::LabelManager> >=^{weak_interface_ptr<vk::LabelManager>}^{__shared_weak_count}}IddQBfCIIIdf{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16, name: labelManagerDidLayout:
-     // Error parsing type: v32@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}{vector<vk::LabelExternalIcon *, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<vk::LabelExternalIcon **, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCC}f{shared_ptr<gss::StyleManager>=^{StyleManager}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StyleQuery>=^{StyleQuery}^{__shared_weak_count}}}{LabelImageLoader={list<vk::LabelImageLoader::CachedItem, std::__1::allocator<vk::LabelImageLoader::CachedItem> >={__list_node_base<vk::LabelImageLoader::CachedItem, void *>=^{__list_node<vk::LabelImageLoader::CachedItem, void *>}^{__list_node<vk::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<vk::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *>, vk::LabelImageLoader::LabelImageCacheHash, vk::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}III}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<vk::LabelExternalObjectsModerator, std::__1::default_delete<vk::LabelExternalObjectsModerator> >={__compressed_pair<vk::LabelExternalObjectsModerator *, std::__1::default_delete<vk::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<vk::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}^{shared_ptr<vk::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >={__compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >=^^{__hash_node<unsigned long long, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node<unsigned long long, void *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}^{shared_ptr<vk::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{map<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>, vk::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<vk::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<vk::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, vk::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::weak_interface_ptr<vk::LabelManager> >=^{weak_interface_ptr<vk::LabelManager>}^{__shared_weak_count}}IddQBfCIIIdf{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16@24, name: labelManager:selectedLabelMarkerWillDisappear:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}{vector<vk::LabelExternalIcon *, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<vk::LabelExternalIcon **, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCC}f{shared_ptr<gss::StyleManager>=^{StyleManager}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StyleQuery>=^{StyleQuery}^{__shared_weak_count}}}{LabelImageLoader={list<vk::LabelImageLoader::CachedItem, std::__1::allocator<vk::LabelImageLoader::CachedItem> >={__list_node_base<vk::LabelImageLoader::CachedItem, void *>=^{__list_node<vk::LabelImageLoader::CachedItem, void *>}^{__list_node<vk::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<vk::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *>, vk::LabelImageLoader::LabelImageCacheHash, vk::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}III}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<vk::LabelExternalObjectsModerator, std::__1::default_delete<vk::LabelExternalObjectsModerator> >={__compressed_pair<vk::LabelExternalObjectsModerator *, std::__1::default_delete<vk::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<vk::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}^{shared_ptr<vk::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >={__compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >=^^{__hash_node<unsigned long long, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node<unsigned long long, void *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}^{shared_ptr<vk::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{map<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>, vk::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<vk::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<vk::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, vk::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::weak_interface_ptr<vk::LabelManager> >=^{weak_interface_ptr<vk::LabelManager>}^{__shared_weak_count}}IddQBfCIIIdf{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsDisplay:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}{vector<vk::LabelExternalIcon *, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<vk::LabelExternalIcon **, std::__1::allocator<vk::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCC}f{shared_ptr<gss::StyleManager>=^{StyleManager}^{__shared_weak_count}}{shared_ptr<gss::StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<gss::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StyleQuery>=^{StyleQuery}^{__shared_weak_count}}}{LabelImageLoader={list<vk::LabelImageLoader::CachedItem, std::__1::allocator<vk::LabelImageLoader::CachedItem> >={__list_node_base<vk::LabelImageLoader::CachedItem, void *>=^{__list_node<vk::LabelImageLoader::CachedItem, void *>}^{__list_node<vk::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<vk::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *>, vk::LabelImageLoader::LabelImageCacheHash, vk::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<vk::LabelImageKey>, std::__1::__list_iterator<vk::LabelImageLoader::CachedItem, void *> >, vk::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}III}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?B{Matrix<float, 4, 1>=[4f]}iiiiii}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?BiiI}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<vk::LabelExternalObjectsModerator, std::__1::default_delete<vk::LabelExternalObjectsModerator> >={__compressed_pair<vk::LabelExternalObjectsModerator *, std::__1::default_delete<vk::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<vk::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}^{shared_ptr<vk::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalPointFeature> > >=^{shared_ptr<vk::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >={__compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >=^^{__hash_node<unsigned long long, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node<unsigned long long, void *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}^{shared_ptr<vk::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelExternalRoadFeature> > >=^{shared_ptr<vk::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<vk::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}^{shared_ptr<vk::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelFeature> > >=^{shared_ptr<vk::LabelFeature>}}}{map<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature>, vk::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<vk::LabelExternalRoadFeature>, std::__1::shared_ptr<vk::RoadLabelFeature> >, vk::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<vk::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<vk::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, vk::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, vk::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::weak_interface_ptr<vk::LabelManager> >=^{weak_interface_ptr<vk::LabelManager>}^{__shared_weak_count}}IddQBfCIIIdf{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsLayout:
- (_Bool)currentZoomLevelAllowsRotation;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)deselectLabelMarker;
- (id)selectedLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkers;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint)arg1 selectableLabelsOnly:(_Bool)arg2;
- (id)closestRoadMarkerForSelectionAtPoint:(struct CGPoint)arg1;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint)arg1 avoidCurrent:(_Bool)arg2;
- (_Bool)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
@property(readonly, nonatomic) NSArray *visibleTileSets;
- (CDStruct_071ac149)centerCoordinate;
- (void)debugHighlightLabelAtPoint:(struct CGPoint)arg1;
- (struct VKPoint)screenPointForPoint:(struct CGPoint)arg1;
- (void)_viewTransformSetup;
- (void)didPresent;
- (void)gglWillDrawWithTimestamp;
- (void)updateCameraForFrameResize;
- (void)_update;
- (void)updateWithTimestamp:(double)arg1;
- (_Bool)wantsRender;
- (_Bool)canRender;
- (struct CGPoint)convertCoordinateToCameraModelPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertCoordinateToPoint:(CDStruct_c3b9c2ee)arg1;
- (CDStruct_c3b9c2ee)convertPointToCoordinateOnSphere:(struct CGPoint)arg1;
- (CDStruct_c3b9c2ee)convertPointToCoordinate:(struct CGPoint)arg1;
- (struct CGPoint)convertMapPointToPoint:(CDStruct_c3b9c2ee)arg1;
- (CDStruct_c3b9c2ee)convertPointToMapPoint:(struct CGPoint)arg1;
- (void)stopAnimations;
- (void)stopSearchResultAnimation;
- (void)transitionToFlyoverMode:(int)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) int flyoverMode;
- (void)resumeFlyoverTourAnimation;
- (void)pauseFlyoverTourAnimation;
- (void)startFlyoverTourAnimation:(unsigned long long)arg1 animateToStart:(_Bool)arg2 labelChanged:(CDUnknownBlockType)arg3 stateChange:(CDUnknownBlockType)arg4;
- (void)stopFlyoverAnimation;
- (void)startFlyoverAnimation:(id)arg1 animateToStart:(_Bool)arg2 labelChanged:(CDUnknownBlockType)arg3 stateChange:(CDUnknownBlockType)arg4;
- (void)prepareFlyoverAnimation:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)showSearchResultAnimationAtCoordinate:(CDStruct_c3b9c2ee)arg1 withMapRegion:(id)arg2;
- (_Bool)canShowAnimationForSearchResultWithMapRegion:(id)arg1;
@property(nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
@property(nonatomic) struct PolylineCoordinate routeUserOffset;
@property(retain, nonatomic) NSArray *externalTrafficIncidents;
@property(readonly, nonatomic, getter=isTrackingHeading) _Bool trackingHeading;
@property(readonly, nonatomic) id <VKTrackableAnnotation> trackingAnnotation;
@property(readonly, nonatomic, getter=isAnimatingToTrackAnnotation) _Bool animatingToTrackAnnotation;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
@property(nonatomic) long long annotationTrackingHeadingAnimationDisplayRate;
@property(nonatomic) long long annotationTrackingZoomStyle;
- (_Bool)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
@property(nonatomic) _Bool staysCenteredDuringRotation;
@property(nonatomic) _Bool staysCenteredDuringPinch;
- (id)camera;
- (void)updateCameraFromGlobe;
@property(readonly, nonatomic) double pitch;
@property(readonly, nonatomic) double presentationYaw;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(retain, nonatomic) GEOMapRegion *mapRegion;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
- (void)setCenterCoordinate3D:(CDStruct_071ac149)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(long long)arg6 timingCurve:(CDUnknownBlockType)arg7 completion:(CDUnknownBlockType)arg8;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(long long)arg6 timingCurve:(CDUnknownBlockType)arg7 completion:(CDUnknownBlockType)arg8;
@property(readonly, nonatomic) double altitude;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4;
- (void)setMapRegion:(id)arg1 animated:(_Bool)arg2;
- (void)transferCamera:(id)arg1;
- (struct CGPoint)_centerScreenPoint;
- (void)stopSnappingAnimations;
- (_Bool)canEnter3DMode;
@property(readonly, nonatomic, getter=isFullyPitched) _Bool fullyPitched;
@property(readonly, nonatomic, getter=isPitched) _Bool pitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (id)detailedDescription;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)setContentsScale:(double)arg1;
- (shared_ptr_f06afc6c)styleManager;
- (void)_reloadStylesheet;
- (id)consoleString:(_Bool)arg1;
- (void)dealloc;
- (void)initializeWithRenderer:(struct GLRenderer *)arg1;
- (void)initializeScene;
- (id)initWithTarget:(id)arg1 device:(const shared_ptr_807ec9ac *)arg2 inBackground:(_Bool)arg3 manifestConfiguration:(id)arg4;
- (void)setHidden:(_Bool)arg1;
@property(nonatomic) unsigned char labelScaleFactor;
@property(nonatomic) _Bool localizeLabels;
- (id)boundsForSelectedTransitLines;
- (void)deselectTransitLineMarker;
- (void)selectTransitLineMarker:(id)arg1;
- (id)selectedTransitLineIDs;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint)arg1;
- (id)transitLineMarkersInCurrentViewport;
@property(nonatomic) _Bool labelMarkerSelectionEnabled;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double maximumZoomLevel;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double minimumZoomLevel;
- (void)setNightMode:(_Bool)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(struct DisplayStyle)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (struct DisplayStyle)sourceMapDisplayStyle;
- (_Bool)supportsMapDisplayStyle:(struct DisplayStyle)arg1;
- (void)setStylesheetMapDisplayStyle:(struct DisplayStyle)arg1;
- (void)stylesheetAnimationDidEnd:(_Bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(struct DisplayStyle)arg1 toStyle:(struct DisplayStyle)arg2;
- (void)endStyleAnimationGroup;
- (void)beginStyleAnimationGroup;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(struct DisplayStyle)arg2 setupHandler:(CDUnknownBlockType)arg3;
@property(nonatomic) long long mapType;
- (void)setMapType:(long long)arg1 animated:(_Bool)arg2;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) long long shieldIdiom;
@property(nonatomic) long long navigationShieldSize;
@property(nonatomic) long long shieldSize;
- (void)setEdgeInsets:(struct VKEdgeInsets)arg1;
@property(nonatomic) _Bool trafficIncidentsEnabled;
@property(nonatomic) _Bool trafficEnabled;
@property(nonatomic) _Bool isPitchable;
- (_Bool)isPointValidForGesturing:(struct CGPoint)arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)didStartPanningDeceleration;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint)arg2;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;
- (_Bool)canZoomOutForTileSize:(long long)arg1;
- (_Bool)canZoomInForTileSize:(long long)arg1;
- (double)currentZoomLevelForTileSize:(long long)arg1;
- (double)currentZoomLevel;
- (_Bool)useNewRenderPath;
- (void)resetRenderQueue:(shared_ptr_06328420)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

