//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <EventKit/EKCalendarItem.h>

@class EKCalendarDate, EKEventStore, EKParticipant, EKStructuredLocation, EKSuggestedEventInfo, NSArray, NSDate, NSNumber, NSString, NSURL;

@interface EKEvent : EKCalendarItem
{
    _Bool _occurrenceIsAllDay;
    _Bool _requiresDetachDueToSnoozedAlarm;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    NSString *_birthdayPersonUniqueID;
}

+ (id)privacyLevelAsString:(long long)arg1;
+ (id)eventWithEventStore:(id)arg1;
@property(readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
@property(nonatomic) _Bool requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property(nonatomic) _Bool occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
- (_Bool)updateEventToEvent:(id)arg1;
@property(retain, nonatomic) EKSuggestedEventInfo *suggestionInfo;
- (id)_suggestedEventInfoRelation;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(_Bool)arg3;
- (_Bool)_eventIsTheOnlyRemainingRecurrence;
- (_Bool)removeWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)_isInitialOccurrenceDate:(id)arg1;
- (_Bool)_cancelWithSpan:(long long)arg1 error:(id *)arg2;
- (void)_deleteThisOccurrence;
- (_Bool)_deleteWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)_shouldDeclineInsteadOfDelete;
- (_Bool)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (_Bool)_isSimpleRepeatingEvent;
- (_Bool)allowsSpansOtherThanThisEvent;
- (_Bool)conformsToRecurrenceRules:(id)arg1;
- (_Bool)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;
- (_Bool)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (_Bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;
- (_Bool)_validateDurationConstrainedToRecurrenceInterval;
- (_Bool)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)validateRecurrenceRule:(id)arg1 error:(id *)arg2;
- (id)_dateForNextOccurrence;
- (void)rollback;
- (void)revert;
- (void)didCommit;
- (id)dirtyPropertiesToSkip;
- (_Bool)commitWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)validateWithSpan:(long long)arg1 error:(id *)arg2;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (_Bool)refresh;
- (id)description;
@property(readonly, nonatomic) _Bool canBeRespondedTo;
- (_Bool)allowsAlarmModifications;
- (_Bool)hasSelfAttendee;
@property(readonly, nonatomic) _Bool canSetAvailability;
@property(readonly, copy, nonatomic) NSString *uniqueId;
@property(readonly, nonatomic) NSDate *participationStatusModifiedDate;
@property(readonly, nonatomic) long long pendingParticipationStatus;
@property(readonly, nonatomic) _Bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property(nonatomic) long long travelAdvisoryBehavior;
@property(readonly, nonatomic) _Bool eligibleForTravelAdvisories;
@property(readonly, nonatomic) _Bool automaticLocationGeocodingAllowed;
- (_Bool)changingAllDayPropertyIsAllowed;
@property(readonly, nonatomic) _Bool canDetachSingleOccurrence;
- (_Bool)requiresDetach;
@property(readonly, nonatomic) _Bool responseMustApplyToAll;
- (_Bool)allowsCalendarModifications;
- (_Bool)allowsRecurrenceModifications;
@property(readonly, nonatomic) _Bool isEditable;
@property(readonly, nonatomic) _Bool isDetached;
- (long long)compareStartDateWithEvent:(id)arg1;
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (_Bool)isTentative;
@property(readonly, nonatomic) _Bool attendeeReplyChanged;
@property(readonly, nonatomic) _Bool locationChanged;
@property(readonly, nonatomic) _Bool titleChanged;
@property(readonly, nonatomic) _Bool timeChanged;
@property(readonly, nonatomic) _Bool dateChanged;
@property(readonly, nonatomic) _Bool locationIsAConferenceRoom;
@property(nonatomic) long long privacyLevel;
@property(readonly, nonatomic) _Bool allowsPrivacyLevelModifications;
@property(readonly, nonatomic) _Bool isTravelTimeEditable;
@property(readonly, nonatomic) long long travelRoutingMode;
@property(nonatomic) double travelTime;
@property(readonly, nonatomic) NSDate *startDateIncludingTravel;
- (id)_travelTimeInternalDescription;
- (void)clearInvitationStatus;
@property(nonatomic) unsigned long long invitationStatus;
@property(copy, nonatomic) NSString *responseComment;
@property(nonatomic) long long availability;
- (id)startDateForRecurrence;
- (void)setRecurrenceRule:(id)arg1;
- (id)recurrenceRule;
@property(readonly, nonatomic) NSString *birthdayContactIdentifier;
@property(readonly, nonatomic) long long birthdayPersonID;
- (long long)_parentParticipationStatus;
@property(nonatomic) long long participationStatus;
- (void)setNeedsOccurrenceCacheUpdate:(_Bool)arg1;
- (_Bool)needsOccurrenceCacheUpdate;
- (void)setModifiedProperties:(unsigned int)arg1;
@property(readonly, nonatomic) unsigned int modifiedProperties;
@property(readonly, nonatomic) long long status;
- (CDStruct_79f9e052)endDatePinnedForAllDay;
- (CDStruct_79f9e052)startDatePinnedForAllDay;
@property(readonly, nonatomic) CDStruct_79f9e052 endDateGr;
@property(readonly, nonatomic) CDStruct_79f9e052 startDateGr;
- (CDStruct_79f9e052)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
@property(readonly, copy, nonatomic) NSDate *initialEndDate;
@property(readonly, nonatomic) NSDate *occurrenceDate;
@property(readonly, copy, nonatomic) NSDate *initialStartDate;
- (id)_effectiveTimeZone;
- (void)setTimeZone:(id)arg1;
@property(copy, nonatomic) NSDate *endDate;
@property(readonly, nonatomic) EKCalendarDate *endCalendarDate;
@property(readonly, nonatomic) double durationIncludingTravel;
@property(readonly, nonatomic) double duration;
@property(copy, nonatomic) NSDate *startDate;
@property(readonly, nonatomic) EKCalendarDate *startCalendarDate;
@property(readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property(nonatomic, getter=isAllDay) _Bool allDay;
- (_Bool)_isAllDay;
- (id)title;
- (id)committedValueForKey:(id)arg1;
- (void)_sendModifiedNote;
@property(readonly, nonatomic) _Bool isAllDayDirty;
@property(readonly, nonatomic) _Bool isEndDateDirty;
@property(readonly, nonatomic) _Bool isStartDateDirty;
@property(readonly, nonatomic) _Bool isStatusDirty;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)exportToICS;
@property(readonly, nonatomic) EKEventStore *eventStore;
@property(readonly, nonatomic) NSURL *externalURL;
- (id)externalURI;
@property(readonly, nonatomic) NSString *eventIdentifier;
- (void)dealloc;
- (id)_persistentEvent;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithEventStore:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, nonatomic) NSString *UUID; // @dynamic UUID;
@property(readonly, nonatomic) NSArray *attachments; // @dynamic attachments;
@property(readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;
@property(copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;

@end

