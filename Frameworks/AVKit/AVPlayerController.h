//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIResponder.h>

@class AVPlayer, NSError;

@interface AVPlayerController : UIResponder
{
    AVPlayer *_player;
    long long _status;
    NSError *_error;
}

+ (void)initialize;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) long long status; // @synthesize status=_status;
@property(readonly, nonatomic) AVPlayer *player; // @synthesize player=_player;
- (void).cxx_destruct;
- (id)mediaSelectionGroupForMediaCharacteristic:(id)arg1;
- (void)setCurrentLegibleMediaSelectionOption:(id)arg1;
- (id)currentLegibleMediaSelectionOption;
- (id)legibleMediaSelectionOptions;
- (_Bool)hasLegibleMediaSelectionOptions;
- (void)setCurrentAudioMediaSelectionOption:(id)arg1;
- (id)currentAudioMediaSelectionOption;
- (id)audioMediaSelectionOptions;
- (_Bool)hasAudioMediaSelectionOptions;
- (_Bool)hasMediaSelectionOptions;
- (void)setPictureInPictureInterrupted:(_Bool)arg1;
- (_Bool)isPictureInPictureInterrupted;
- (_Bool)isPictureInPicturePossible;
- (_Bool)isCompatibleWithAirPlayVideo;
- (id)externalPlaybackAirPlayDeviceLocalizedName;
- (long long)externalPlaybackType;
@property(nonatomic, getter=isPlayingOnSecondScreen) _Bool playingOnSecondScreen;
- (_Bool)isExternalPlaybackActive;
- (_Bool)isPlayingOnExternalScreen;
- (void)setAllowsExternalPlayback:(_Bool)arg1;
- (_Bool)allowsExternalPlayback;
- (id)timing;
- (void)seekChapterBackward:(id)arg1;
- (_Bool)canSeekChapterBackward;
- (void)seekChapterForward:(id)arg1;
- (_Bool)canSeekChapterForward;
- (void)seekToChapter:(id)arg1;
- (id)contentChapters;
- (void)endScrubbing:(id)arg1;
- (void)beginScrubbing:(id)arg1;
- (_Bool)isAtMinTime;
- (_Bool)isAtMaxTime;
- (void)gotoEndOfSeekableRanges:(id)arg1;
- (void)skipBackwardThirtySeconds:(id)arg1;
- (void)seekFrameBackward:(id)arg1;
- (_Bool)canSeekFrameBackward;
- (void)seekFrameForward:(id)arg1;
- (_Bool)canSeekFrameForward;
- (void)seekToEnd:(id)arg1;
- (_Bool)canSeekToEnd;
- (void)seekToBeginning:(id)arg1;
- (_Bool)canSeekToBeginning;
- (void)endScanningBackward:(id)arg1;
- (void)beginScanningBackward:(id)arg1;
- (void)scanBackward:(id)arg1;
- (_Bool)canScanBackward;
- (void)endScanningForward:(id)arg1;
- (void)beginScanningForward:(id)arg1;
- (void)scanForward:(id)arg1;
- (_Bool)canScanForward;
- (void)seekByTimeInterval:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekByTimeInterval:(double)arg1;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekToTime:(double)arg1;
- (_Bool)isSeeking;
- (_Bool)canSeek;
- (id)metadata;
- (_Bool)hasShareableContent;
- (_Bool)hasTrimmableContent;
- (_Bool)hasLiveStreamingContent;
- (_Bool)hasContentChapters;
- (_Bool)hasEnabledVideo;
- (_Bool)hasEnabledAudio;
- (id)seekableTimeRanges;
- (id)loadedTimeRanges;
- (double)currentTimeWithinEndTimes;
- (double)contentDurationWithinEndTimes;
- (void)setMaxTime:(double)arg1;
- (double)maxTime;
- (void)setMinTime:(double)arg1;
- (double)minTime;
- (double)currentTime;
- (struct CGSize)contentDimensions;
- (void)setContentDuration:(double)arg1;
- (double)contentDuration;
- (_Bool)hasContent;
- (void)toggleMuted:(id)arg1;
- (void)changeVolumeToMaximum:(id)arg1;
- (void)changeVolumeToMinimum:(id)arg1;
- (void)decreaseVolume:(id)arg1;
- (void)increaseVolume:(id)arg1;
- (void)setVolume:(double)arg1;
- (double)volume;
- (void)setLooping:(_Bool)arg1;
- (_Bool)isLooping;
- (void)togglePlaybackEvenWhenInBackground:(id)arg1;
- (void)togglePlayback:(id)arg1;
- (_Bool)canTogglePlayback;
- (void)pause:(id)arg1;
- (void)setCanPause:(_Bool)arg1;
- (_Bool)canPause;
- (void)autoplay:(id)arg1;
- (void)play:(id)arg1;
- (void)setPlaying:(_Bool)arg1;
- (_Bool)isPlaying;
- (_Bool)canPlay;
- (void)setRateWithThrottling:(double)arg1;
- (void)setRate:(double)arg1;
- (double)rate;
- (id)initWithPlayer:(id)arg1;
- (void)setRateWithForce:(double)arg1;
@property(nonatomic) _Bool CALayerDestinationIsTVOut;
@property(readonly, nonatomic) _Bool hasDiscoveredVideo;

@end

