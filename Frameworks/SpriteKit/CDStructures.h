//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct MaxRectTexturePacker;

struct PKCAether;

struct PKPath;

struct SKCAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
};

struct SKCAnimate {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct vector<SKTexture *, std::__1::allocator<SKTexture *>> _field20;
    double _field21;
    id _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCColorize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field20;
    float _field21;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field22;
    float _field23;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field24;
    float _field25;
    _Bool _field26;
};

struct SKCCustomAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    CDUnknownBlockType _field20;
};

struct SKCFade {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    _Bool _field23;
};

struct SKCFalloff {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCFollowPath {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    unsigned int _field21;
    struct PKPath *_field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
};

struct SKCGroup {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct list<SKCAction *, std::__1::allocator<SKCAction *>> _field20;
};

struct SKCHide {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    _Bool _field20;
};

struct SKCKeyframeSequence {
    int _field1;
    int _field2;
    long long _field3;
    long long _field4;
    float *_field5;
    float *_field6;
};

struct SKCMove {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCPlaySound {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    id _field20;
    _Bool _field21;
    _Bool _field22;
};

struct SKCReferencedAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct SKCAction *_field20;
};

struct SKCRepeat {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct SKCAction *_field20;
    unsigned long long _field21;
    unsigned long long _field22;
    _Bool _field23;
};

struct SKCResize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCRotate {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    float _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    _Bool _field35;
};

struct SKCScale {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
};

struct SKCSequence {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct vector<SKCAction *, std::__1::allocator<SKCAction *>> _field20;
    unsigned long long _field21;
};

struct SKCSpeed {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCStats {
    CDUnknownFunctionPointerType *_vptr$SKCStats;
    double frameBeginTime;
    double frameDuration;
    double baseTime;
    double currentTime;
    int frameCount;
    CDStruct_febfcd7b clientUpdate;
    CDStruct_febfcd7b update;
    struct {
        double beginTime;
        double duration;
        int bodyCount;
    } physics;
    struct {
        double beginTime;
        double duration;
        int constraintCount;
    } constraints;
    struct {
        double beginTime;
        double duration;
        int opCount;
        int quadCount;
        int nodeTraversalCount;
        int nodeRenderCount;
        int drawCallCount;
        int passCount;
    } render;
};

struct SKCStrength {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCWait {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
};

struct TextureInfo;

struct Token;

struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>;

struct __list_node<SKCAction *, void *>;

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct jet_command_buffer;

struct jet_fence;

struct jet_framebuffer;

struct jet_program;

struct jet_texture {
    CDUnknownFunctionPointerType *_field1;
};

struct list<SKCAction *, std::__1::allocator<SKCAction *>> {
    struct __list_node_base<SKCAction *, void *> {
        struct __list_node<SKCAction *, void *> *_field1;
        struct __list_node<SKCAction *, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, double, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, double>>> {
    struct __tree<std::__1::__value_type<unsigned int, double>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, double>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, double>>> {
        struct __tree_node<std::__1::__value_type<unsigned int, double>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, double>, std::__1::less<unsigned int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, SKSpriteNode *, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, SKSpriteNode *>>> {
    struct __tree<std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, SKSpriteNode *>>> {
        struct __tree_node<std::__1::__value_type<unsigned short, SKSpriteNode *>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, SKSpriteNode *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::less<unsigned short>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, double, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, double>>> {
    struct __tree<std::__1::__value_type<unsigned short, double>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, double>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, double>>> {
        struct __tree_node<std::__1::__value_type<unsigned short, double>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, double>, std::__1::less<unsigned short>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct set<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
    struct __tree<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
        struct __tree_node<SKNode *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<SKNode *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<SKNode *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PKCAether> {
    struct PKCAether *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<jet_command_buffer> {
    struct jet_command_buffer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<jet_fence> {
    struct jet_fence *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<jet_framebuffer> {
    struct jet_framebuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<jet_program> {
    struct jet_program *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<jet_texture> {
    struct jet_texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<std::__1::basic_string<char>, SKTexture *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKTexture *>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<CGRect, std::__1::allocator<CGRect>> {
    struct CGRect *_field1;
    struct CGRect *_field2;
    struct __compressed_pair<CGRect *, std::__1::allocator<CGRect>> {
        struct CGRect *_field1;
    } _field3;
};

struct vector<CGSize, std::__1::allocator<CGSize>> {
    struct CGSize *_field1;
    struct CGSize *_field2;
    struct __compressed_pair<CGSize *, std::__1::allocator<CGSize>> {
        struct CGSize *_field1;
    } _field3;
};

struct vector<SKCAction *, std::__1::allocator<SKCAction *>> {
    struct SKCAction **_field1;
    struct SKCAction **_field2;
    struct __compressed_pair<SKCAction **, std::__1::allocator<SKCAction *>> {
        struct SKCAction **_field1;
    } _field3;
};

struct vector<SKTexture *, std::__1::allocator<SKTexture *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<SKTexture *__strong *, std::__1::allocator<SKTexture *>> {
        id *_field1;
    } _field3;
};

struct vector<TextureInfo, std::__1::allocator<TextureInfo>> {
    struct TextureInfo *_field1;
    struct TextureInfo *_field2;
    struct __compressed_pair<TextureInfo *, std::__1::allocator<TextureInfo>> {
        struct TextureInfo *_field1;
    } _field3;
};

struct vector<Token, std::__1::allocator<Token>> {
    struct Token *_field1;
    struct Token *_field2;
    struct __compressed_pair<Token *, std::__1::allocator<Token>> {
        struct Token *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    double beginTime;
    double duration;
} CDStruct_febfcd7b;

// Ambiguous groups
typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
} basic_string_805fe43b;

typedef struct map<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
} map_a51e33c7;

typedef struct set<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
    struct __tree<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
        struct __tree_node<SKNode *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<SKNode *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<SKNode *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} set_23ab0f84;

typedef struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7747cbe3;

typedef struct shared_ptr<PKCAether> {
    struct PKCAether *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_11a7378b;

typedef struct shared_ptr<jet_command_buffer> {
    struct jet_command_buffer *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_d7c0f433;

typedef struct shared_ptr<jet_framebuffer> {
    struct jet_framebuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2ce53ef7;

typedef struct shared_ptr<jet_program> {
    struct jet_program *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_394c00aa;

typedef struct shared_ptr<jet_texture> {
    struct jet_texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_bb77cfd9;

typedef struct vector<CGRect, std::__1::allocator<CGRect>> {
    struct CGRect *_field1;
    struct CGRect *_field2;
    struct __compressed_pair<CGRect *, std::__1::allocator<CGRect>> {
        struct CGRect *_field1;
    } _field3;
} vector_ea45b3ba;

typedef struct vector<CGSize, std::__1::allocator<CGSize>> {
    struct CGSize *_field1;
    struct CGSize *_field2;
    struct __compressed_pair<CGSize *, std::__1::allocator<CGSize>> {
        struct CGSize *_field1;
    } _field3;
} vector_c74fc2b3;

typedef struct vector<TextureInfo, std::__1::allocator<TextureInfo>> {
    struct TextureInfo *_field1;
    struct TextureInfo *_field2;
    struct __compressed_pair<TextureInfo *, std::__1::allocator<TextureInfo>> {
        struct TextureInfo *_field1;
    } _field3;
} vector_65e381fc;

typedef struct vector<Token, std::__1::allocator<Token>> {
    struct Token *_field1;
    struct Token *_field2;
    struct __compressed_pair<Token *, std::__1::allocator<Token>> {
        struct Token *_field1;
    } _field3;
} vector_408ca79d;

#pragma mark Named Unions

union _GLKMatrix2 {
    struct {
        float m00;
        float m01;
        float m10;
        float m11;
    } ;
    float m2[2][2];
    float m[4];
};

union _GLKMatrix3 {
    struct {
        float m00;
        float m01;
        float m02;
        float m10;
        float m11;
        float m12;
        float m20;
        float m21;
        float m22;
    } ;
    float m[9];
};

union _GLKMatrix4 {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
};

union _GLKVector2 {
    struct {
        float x;
        float y;
    } ;
    struct {
        float s;
        float t;
    } ;
    float v[2];
};

union _GLKVector3 {
    struct {
        float x;
        float y;
        float z;
    } ;
    struct {
        float r;
        float g;
        float b;
    } ;
    struct {
        float s;
        float t;
        float p;
    } ;
    float v[3];
};

union _GLKVector4 {
    struct {
        float x;
        float y;
        float z;
        float w;
    } ;
    struct {
        float r;
        float g;
        float b;
        float a;
    } ;
    struct {
        float s;
        float t;
        float p;
        float q;
    } ;
    float v[4];
};

