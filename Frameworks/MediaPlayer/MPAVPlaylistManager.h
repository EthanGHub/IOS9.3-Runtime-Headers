//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul 30 2016 09:41:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import <MediaPlayer/MPAVQueueCoordinatorDataSource-Protocol.h>
#import <MediaPlayer/MPQueueBehaviorManaging-Protocol.h>
#import <MediaPlayer/MPQueueFeederDelegate-Protocol.h>
#import <MediaPlayer/NSCoding-Protocol.h>

@class MPAVController, MPAVItem, MPAVQueueCoordinator, MPQueueFeeder, MPQueuePlayer, NSString;
@protocol MPAVPlaylistManagerDelegate;

@interface MPAVPlaylistManager : NSObject <MPQueueFeederDelegate, MPAVQueueCoordinatorDataSource, MPQueueBehaviorManaging, NSCoding>
{
    NSString *_audioSessionModeOverride;
    MPAVItem *_currentItem;
    _Bool _goToTargetIndex;
    long long _lastSelectionDirection;
    MPQueuePlayer *_player;
    MPQueueFeeder *_playlistFeeder;
    long long _repeatMode;
    long long _targetIndex;
    _Bool _updatedAudioSessionMode;
    _Bool _changingPlayer;
    _Bool _changingPlaylistFeeder;
    long long _playbackMode;
    MPAVQueueCoordinator *_queueCoordinator;
    id <MPAVPlaylistManagerDelegate> _delegate;
    MPAVController *_avController;
}

@property(nonatomic) __weak MPAVController *avController; // @synthesize avController=_avController;
@property(retain, nonatomic) NSString *audioSessionModeOverride; // @synthesize audioSessionModeOverride=_audioSessionModeOverride;
@property(readonly) MPAVItem *currentItem; // @synthesize currentItem=_currentItem;
@property(readonly, nonatomic, getter=isChangingPlaylistFeeder) _Bool changingPlaylistFeeder; // @synthesize changingPlaylistFeeder=_changingPlaylistFeeder;
@property(readonly, nonatomic, getter=isChangingPlayer) _Bool changingPlayer; // @synthesize changingPlayer=_changingPlayer;
@property(readonly, nonatomic) MPQueueFeeder *playlistFeeder; // @synthesize playlistFeeder=_playlistFeeder;
@property(nonatomic) __weak id <MPAVPlaylistManagerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) MPAVQueueCoordinator *queueCoordinator; // @synthesize queueCoordinator=_queueCoordinator;
@property(readonly) MPQueuePlayer *player; // @synthesize player=_player;
@property(readonly, nonatomic) long long playbackMode; // @synthesize playbackMode=_playbackMode;
- (void).cxx_destruct;
- (void)_updateAudioSessionModeWithIndex:(unsigned long long)arg1;
- (unsigned long long)_playbackIndexForDelta:(long long)arg1 fromIndex:(unsigned long long)arg2 ignoreElapsedTime:(_Bool)arg3;
- (void)_notifyQueueFeederContentsChanged;
- (void)_handleDownloadCancelledForDownloadToken:(unsigned long long)arg1;
- (void)_applyVolumeNormalizationForQueuedItems;
- (id)queueCoordinator:(id)arg1 itemToFollowItem:(id)arg2;
- (id)_itemToFollowItemIndex:(long long)arg1 skipUnavailableContent:(_Bool)arg2;
- (long long)_nextItemIndex:(long long)arg1 repeatMode:(long long)arg2;
- (void)_reloadQueuedItemsIfPathBecameAvailable;
- (void)_setStateForPlaylistFeeder:(id)arg1 startIndex:(unsigned long long)arg2;
- (_Bool)setPlaylistFeeder:(id)arg1 startIndex:(long long)arg2 keepPlaying:(_Bool)arg3;
- (_Bool)canChangePlaylistFeeder;
- (void)reloadWithPlaybackContext:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property long long repeatMode;
@property(readonly) long long currentIndex;
- (void)setCurrentIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (void)reloadItemsKeepingCurrentItem:(_Bool)arg1;
- (void)_willFinishReloadWithQueueFeeder:(id)arg1 fromPlaybackContext:(id)arg2;
- (long long)_prepareToQueuePlaybackIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (id)_queuePlayerFeederItemForIndex:(long long)arg1;
- (void)updateForSoundCheckDefaultsChange;
- (long long)playlistIndexOfQueueIdentifier:(id)arg1 inPlaylistFeeder:(id)arg2;
- (long long)playlistIndexOfItemIdentifier:(id)arg1;
- (long long)playlistIndexOfItem:(id)arg1;
- (long long)playlistIndexOfIndex:(long long)arg1 inPlaylistFeeder:(id)arg2;
- (id)playlistFeederForPlaylistIndex:(long long)arg1;
- (id)metadataItemForPlaylistIndex:(long long)arg1;
- (id)itemForPlaylistIndex:(long long)arg1;
- (void)handlePlaybackFailureForItem:(id)arg1;
- (unsigned long long)displayIndexForItem:(id)arg1;
- (unsigned long long)displayCountForItem:(id)arg1;
- (long long)playlistIndexWithDelta:(long long)arg1 fromIndex:(long long)arg2 ignoreElapsedTime:(_Bool)arg3;
- (_Bool)canSkipItem:(id)arg1;
@property(readonly, nonatomic) _Bool userCanChangeShuffleAndRepeatType;
@property(readonly, nonatomic) _Bool canSkipToPreviousItem;
@property(readonly, nonatomic) _Bool canSeek;
@property(readonly, nonatomic) _Bool allowsUserVisibleUpcomingItems;
- (void)queueFeederDidInvalidateAssets:(id)arg1;
- (void)queueFeeder:(id)arg1 didChangeContentsWithReplacementPlaybackContext:(id)arg2;
- (void)queueFeeder:(id)arg1 didChangeContentsWithPreferredStartIndex:(unsigned long long)arg2 error:(id)arg3;
- (void)queueCoordinator:(id)arg1 willInsertItem:(id)arg2 afterItem:(id)arg3;
- (void)queueCoordinatorDidChangeItems:(id)arg1;
- (void)queueCoordinator:(id)arg1 failedToLoadItem:(id)arg2;
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)arg1;
- (void)_streamingDownloadSessionControllerDidFailDownloadSessionNotification:(id)arg1;
- (void)_storePlayWhileDownloadControllerDidFinishPlayWhileDownloadSessionNotification:(id)arg1;
- (void)clearQueueFeeder;
- (void)player:(id)arg1 currentItemDidChangeFromItem:(id)arg2 toItem:(id)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)disconnectPlayer;
- (void)connectPlayer;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (void)_awakeFromCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

